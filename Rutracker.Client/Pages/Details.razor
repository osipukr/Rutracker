@page "/details"
@inject TorrentServiceClient Client
@inject IUriHelper UriHelper

@if (model == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <button onclick="@BackToTorrentsButtonClick" class="btn btn-primary mb-3">Go to full torrents list</button>

    if (model.TorrentDetailsItem == null)
    {
        <p>Torrent with id=@TorrentId not found</p>
    }
    else
    {
        <div>
            <p class="d-inline font-weight-bold">Id</p> - @model.TorrentDetailsItem.Id
        </div>
        <div>
            <p class="d-inline font-weight-bold">Size</p> - @model.TorrentDetailsItem.Size
        </div>
        <div>
            <p class="d-inline font-weight-bold">Date</p> - @model.TorrentDetailsItem.Date.ToLongDateString()
        </div>
        <div>
            <p class="d-inline font-weight-bold">Title</p> - @model.TorrentDetailsItem.Title
        </div>
        <div>
            <p class="d-inline font-weight-bold">Hash</p> - @model.TorrentDetailsItem.Hash
        </div>
        <div>
            <p class="d-inline font-weight-bold">Forum title</p> Title @model.TorrentDetailsItem.ForumTitle
        </div>
        <div>
            <p class="d-inline font-weight-bold">IsDeleted</p> - @model.TorrentDetailsItem.IsDeleted.ToString()
        </div>

        @if (model.TorrentDetailsItem.TorrentFiles.Length == 0)
        {
            <div>
                <p class="d-inline font-weight-bold">Files</p> - List files is empty
            </div>
        }
        else
        {
            <div>
                <p class="d-inline font-weight-bold">Files</p> -
            </div>
            <ul class="text-left mb-4">
                @foreach (var file in model.TorrentDetailsItem.TorrentFiles)
                {
                    <li>size: @file.Size --- name: <p class="d-inline font-weight-bold">@file.Name</p></li>
                }
            </ul>
        }

        @((MarkupString)model.TorrentDetailsItem.Content)
    }
}

@functions
{
    private long TorrentId { get; set; }

    private TorrentDetailsViewModel model;

    protected override async Task OnInitAsync()
    {
        await LoadAsync();
    }

    private async Task LoadAsync()
    {
        var uri = new Uri(UriHelper.GetAbsoluteUri());

        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("torrentid", out var stringValues)
            && long.TryParse(stringValues.FirstOrDefault(), out var torrentId))
        {
            TorrentId = torrentId;
        }

        model = await Client.GetTorrentDetailsAsync(TorrentId);
    }

    private void BackToTorrentsButtonClick()
    {
        UriHelper.NavigateTo("/torrents");
    }
}