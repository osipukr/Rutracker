@page "/torrents"
@inject TorrentServiceClient Client
@inject IUriHelper UriHelper

@if (model == null)
{
    <p><em>Loading...</em></p>
}
else if (model.TorrentItems.Length == 0)
{
    <p>List torrents is empty...</p>
    <button onclick="@(async () => await LoadAsync())" class="btn btn-primary">Try to update</button>
}
else
{
    <table id="torrents-table" class="table table-hover">
        <thead>
            <tr>
                <th>Id</th>
                <th>Size</th>
                <th>Date</th>
                <th>Title</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var torrent in model.TorrentItems)
            {
                <tr onclick="@(() => TorrentDetailsClick(torrent.Id))">
                    <td>@torrent.Id</td>
                    <td>@torrent.Size</td>
                    <td>@torrent.Date.ToShortDateString()</td>
                    <td>@torrent.Title)</td>
                </tr>
            }
        </tbody>
    </table>

    <nav class="d-flex justify-content-center">
        <ul class="pagination">
            <li class="page-item pr-2">
                <a onclick="@(async () => await PagerButtonClicked(model.PageModel.PageNumber - 1, model.PageModel.HasPrevious))"
                        class="btn btn-primary page-link @(model.PageModel.HasPrevious ? "active" : "disabled")">
                    Previous
                </a>
            </li>

            <li class="page-item">
                <a onclick="@(async () => await PagerButtonClicked(model.PageModel.PageNumber + 1, model.PageModel.HasNext))"
                        class="btn btn-primary page-link @(model.PageModel.HasNext ? "active" : "disabled")">
                    Next
                </a>
            </li>
        </ul>
    </nav>
}

@functions
{
    private string Search { get; set; } = "";
    private string Sort { get; set; } = "id";
    private string Order { get; set; } = "asc";
    private int Page { get; set; } = 1;

    private TorrentsViewModel model;

    protected override async Task OnInitAsync() => await LoadAsync();

    private void InitParameters()
    {
        var uri = new Uri(UriHelper.GetAbsoluteUri());

        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("search", out var search))
        {
            Search = search.FirstOrDefault();
        }

        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("sort", out var sort))
        {
            Sort = sort.FirstOrDefault();
        }

        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("order", out var order))
        {
            Order = order.FirstOrDefault();
        }

        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("page", out var page)
            && int.TryParse(page.FirstOrDefault(), out var pageid))
        {
            Page = pageid;
        }
    }

    private async Task LoadAsync()
    {
        InitParameters();

        model = await Client.GetTorrentsAsync(Search, Sort, Order, Page);
    }

    private void TorrentDetailsClick(long id)
    {
        UriHelper.NavigateTo($"/details?torrentid={id}");
    }

    private async Task PagerButtonClicked(int page, bool isAction)
    {
        if (isAction)
        {
            UriHelper.NavigateTo($"/torrents?search={Search}&sort={Sort}&order={Order}&page={page}");
            await LoadAsync();
        }
    }
}