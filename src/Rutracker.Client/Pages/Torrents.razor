@page "/"
@page "/torrents"

@implements IDisposable
@inject IUriHelper UriHelper
@inject ITorrentsClientService Client
@inject IMatToaster MatToaster
@inject ViewSettings ViewSettings

@if (Model == null)
{
    <LoadingBackground>
        <span>Loading page model, please wait...</span>
    </LoadingBackground>
}
else
{
    <Filtration Model="@FilterModel" ChangedHandler="@FilterApplyButtonClick" />
    <TorrentList Items="@Model.TorrentItems" PageSize="@PageSize" />
    <Pagination Model="@Model.PaginationModel" PageChanged="@PageButtonClick" />
}

@functions
{
    TorrentsIndexViewModel Model { get; set; }
    FiltrationViewModel FilterModel { get; set; } = new FiltrationViewModel();

    int Page { get; set; }
    int PageSize => ViewSettings.ItemsPerPageCount;

    protected override async Task OnInitAsync()
    {
        await RefreshTypesAsync();

        UriHelper.OnLocationChanged += OnLocationChanges;
    }

    async void OnLocationChanges(object sender, LocationChangedEventArgs args) => await RefreshTypesAsync();

    async Task RefreshTypesAsync()
    {
        var uriQuery = new Uri(UriHelper.GetAbsoluteUri()).Query;

        FilterModel.Search = QueryHelpers.ParseQuery(uriQuery).TryGetValue("search", out var searchParam)
                ? searchParam.First()
                : null;

        Page = QueryHelpers.ParseQuery(uriQuery).TryGetValue("page", out var pageParam)
               && int.TryParse(pageParam.First(), out var pageParamId)
               ? pageParamId
               : 1;

        await LoadTorrentsIndexAsync();
        StateHasChanged();
    }

    async Task LoadTorrentsIndexAsync()
    {
        try
        {
            if (Model != null)
            {
                Model.TorrentItems = null;
                Model.PaginationModel = null;
                StateHasChanged();
            }

            Model = await Client.GetTorrentsIndexAsync(Page, PageSize, FilterModel);
        }
        catch (Exception ex)
        {
            MatToaster.Add(ex.Message, MatToastType.Danger, "Model Load Failed");
        }
    }

    void PageButtonClick(int page) => UriHelper.NavigateTo($"/torrents?search={FilterModel.Search}&page={page}");

    void FilterApplyButtonClick() => UriHelper.NavigateTo($"/torrents?search={FilterModel.Search}");

    public void Dispose() => UriHelper.OnLocationChanged -= OnLocationChanges;
}