@page "/torrents"
@implements IDisposable
@inject TorrentServiceClient Client
@inject IUriHelper UriHelper

@if (Model == null)
{
    <Loader />
}
else
{
    <div class="row">
        <div class="col-lg-3 pb-3">
            <Filtration Model="@FilterModel" ChangedHandler="@FiltrationhButtonClick" />
        </div>

        <div class="col-lg-9">
            <TorrentTable Items="@Model.TorrentItems" />

            <Pagination Model="@Model.PaginationModel" PageChanged="@PageButtonClick" />
        </div>
    </div>
}

@functions
{
    private TorrentsViewModel Model { get; set; }
    private FiltrationViewModel FilterModel { get; set; } = new FiltrationViewModel();
    private int Page { get; set; }
    private int PageSize { get; set; }
    private const string quearyTemplate = "/torrents?search={0}&page={1}";

    protected override async Task OnInitAsync()
    {
        await RefreshType();
        UriHelper.OnLocationChanged += OnLocationChanges;
    }

    private async void OnLocationChanges(object sender, string location) => await RefreshType();

    private async Task RefreshType()
    {
        var uri = new Uri(UriHelper.GetAbsoluteUri());

        FilterModel.Search = QueryHelpers.ParseQuery(uri.Query).TryGetValue("search", out var searchParam)
            ? searchParam.FirstOrDefault()
            : "";

        Page = QueryHelpers.ParseQuery(uri.Query).TryGetValue("page", out var pageParam)
               && int.TryParse(pageParam.FirstOrDefault(), out var pageParamId)
               && pageParamId > 1
               ? pageParamId
               : 1;

        PageSize = Constants.DefaultPageSize;

        await LoadTorrentsAsync();
        StateHasChanged();
    }

    private async Task LoadTorrentsAsync() => Model = await Client.GetTorrentsAsync(Page, PageSize, FilterModel);

    private void TorrentDetailsClick(long id) => UriHelper.NavigateTo($"/torrent/{id}");

    private void PageButtonClick(int page)
    {
        var uri = string.Format(quearyTemplate, FilterModel.Search, page);

        UriHelper.NavigateTo(uri);
    }

    private void FiltrationhButtonClick()
    {
        var uri = string.Format(quearyTemplate, FilterModel.Search, 1);

        UriHelper.NavigateTo(uri);
    }

    public void Dispose() => UriHelper.OnLocationChanged -= OnLocationChanges;
}