@page "/torrents"
@implements IDisposable
@inject TorrentServiceClient Client
@inject IUriHelper UriHelper

@if (Model == null)
{
    <p><em>Loading...</em></p>
}
else
{
    if (!Model.TorrentItems.Any())
    {
        <p>Sorry, but torrents list is empty...</p>

        @if (string.IsNullOrWhiteSpace(Model.SelectedTitle))
        {
            <button class="btn btn-primary d-block mt-2" onclick="@(async () => await LoadTorrentsAsync())">Try to update</button>
        }
        else
        {
            <button class="btn btn-primary d-block mt-2" onclick="@(() => BackToButtonClick())">Back to full torrents list</button>
        }
    }
    else
    {
        <SearchForm Value="@Model.SelectedTitle" ClickHandler="@SearchButtonClick" />

        <TorrentTable Items="@Model.TorrentItems" RowClickHandler="@TorrentDetailsClick">
            <GridHeader>
                <th scope="col">Id</th>
                <th scope="col">Size</th>
                <th scope="col">Date</th>
                <th scope="col">Title</th>
            </GridHeader>
            <GridRow>
                <th scope="row">@context.Id</th>
                <td>@context.Size</td>
                <td>@context.Date.ToShortDateString()</td>
                <td>@context.Title)</td>
            </GridRow>
        </TorrentTable>

        <Pagination Model="@Model.PageModel" ClickHandler="@PageButtonClick" />
    }
}

@functions
{
    private TorrentsViewModel Model { get; set; }
    private string Search { get; set; }
    private int Page { get; set; }
    private const string quearyTemplate = "/torrents?search={0}&page={1}";

    protected override void OnInit()
    {
        RefreshType();
        UriHelper.OnLocationChanged += OnLocationChanges;
    }

    private void OnLocationChanges(object sender, string location) => RefreshType();

    private async void RefreshType()
    {
        var uri = new Uri(UriHelper.GetAbsoluteUri());

        Search = QueryHelpers.ParseQuery(uri.Query).TryGetValue("search", out var searchParam) 
            ? searchParam.FirstOrDefault() 
            : "";

        Page = QueryHelpers.ParseQuery(uri.Query).TryGetValue("page", out var pageParam)
               && int.TryParse(pageParam.FirstOrDefault(), out var pageParamId) 
               && pageParamId > 1
               ? pageParamId
               : 1;

        await LoadTorrentsAsync();
        StateHasChanged();
    }

    private async Task LoadTorrentsAsync() => Model = await Client.GetTorrentsAsync(Constants.ItemsPerPage, Page, Search);

    private void TorrentDetailsClick(long id) => UriHelper.NavigateTo($"/details/{id}");

    private void PageButtonClick(int page) => UriHelper.NavigateTo(string.Format(quearyTemplate, Search, page));

    private void SearchButtonClick(string search) => UriHelper.NavigateTo(string.Format(quearyTemplate, search, 1));

    private void BackToButtonClick() => UriHelper.NavigateTo("/torrents");

    private void SortButtonClick(string property) => UriHelper.NavigateTo(string.Format(quearyTemplate, Model.SelectedTitle, 1));

    public void Dispose() => UriHelper.OnLocationChanged -= OnLocationChanges;
}