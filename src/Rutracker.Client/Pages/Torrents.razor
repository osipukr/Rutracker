@page "/torrents"
@implements IDisposable
@inject ITorrentsClientService Client
@inject IUriHelper UriHelper

<div class="row">
    <div class="col-lg-3 pb-3">
        <Filtration Model="@FilterModel" ChangedHandler="@FilterApplyButtonClick" SearchTask="@SearchTask" />
    </div>

    <div class="col-lg-9">
        @if (SearchTask.IsCompleted && Model != null)
        {
            <TorrentsList Items="@Model.TorrentItems" />
            <Pagination Model="@Model.PaginationModel" PageChanged="@PageButtonClick" />
        }
        else
        {
            <LoadSpinner />
        }
    </div>
</div>

@code
{
    private TorrentsIndexViewModel Model { get; set; }
    private FiltrationViewModel FilterModel { get; set; } = new FiltrationViewModel();
    private Task<TorrentsIndexViewModel> SearchTask { get; set; }

    private int Page { get; set; }
    private int PageSize { get; set; }

    private const string QuearyTemplate = "/torrents?search={0}&page={1}";

    protected override async Task OnInitAsync()
    {
        await RefreshTypesAsync();

        UriHelper.OnLocationChanged += OnLocationChanges;
    }

    private async void OnLocationChanges(object sender, LocationChangedEventArgs args) => await RefreshTypesAsync();

    private async Task RefreshTypesAsync()
    {
        var uriQuery = new Uri(UriHelper.GetAbsoluteUri()).Query;

        Page = QueryHelpers.ParseQuery(uriQuery).TryGetValue("page", out var pageParam)
               && int.TryParse(pageParam.FirstOrDefault(), out var pageParamId)
               && pageParamId > 1
               ? pageParamId
               : 1;

        PageSize = ClientConstants.ItemsPerPageCount;

        FilterModel.Search = QueryHelpers.ParseQuery(uriQuery).TryGetValue("search", out var searchParam)
            ? searchParam.FirstOrDefault()
            : null;

        await LoadTorrentsIndexAsync();
        StateHasChanged();
    }

    private async Task LoadTorrentsIndexAsync()
    {
        SearchTask = null;
        StateHasChanged();

        SearchTask = Client.GetTorrentsIndexAsync(Page, PageSize, FilterModel);
        Model = await SearchTask;
    }

    private void PageButtonClick(int page) => UriHelper.NavigateTo(string.Format(QuearyTemplate, FilterModel.Search, page));

    private void FilterApplyButtonClick() => UriHelper.NavigateTo(string.Format(QuearyTemplate, FilterModel.Search, 1));

    public void Dispose() => UriHelper.OnLocationChanged -= OnLocationChanges;
}