@page "/torrents"
@implements IDisposable
@inject TorrentServiceClient Client
@inject IUriHelper UriHelper

@if (Model == null)
{
    <div class="h-100 d-flex justify-content-center align-items-center">
        <div class="spinner-border text-primary" role="status">
            <span class="sr-only">Loading...</span>
        </div>
    </div>
}
else
{
    <div class="card card-body mb-3">
        <SearchForm ClickHandler="@SearchButtonClick" />

        @*<div class="row d-flex justify-content-end mx-0">
            <button class="btn btn-primary" onclick="@(async () => await BackToFullButtonClick())">Back to full torrents list</button>
        </div>

        <Filtration Model="@FiltrationModel" ApplyClickHandler="@FiltrationButtClick" />*@
    </div>

    <TorrentTable Items="@Model.TorrentItems" RowClickHandler="@TorrentDetailsClick">
        <TableHeader>
            <th scope="col">Id</th>
            <th scope="col">Size</th>
            <th scope="col">Date</th>
            <th scope="col">Title</th>
        </TableHeader>
        <RowTemplate Context="torrent">
            <th scope="row"><a href="/torrent/@torrent.Id" class="text-body">@torrent.Id</a></th>
            <td>@torrent.Size</td>
            <td>@torrent.Date.ToShortDateString()</td>
            <td><a href="/torrent/@torrent.Id" class="text-body">@torrent.Title</a></td>
        </RowTemplate>
    </TorrentTable>

    if (Model.TorrentItems?.Any() ?? false)
    {
        <Pagination Model="@Model.PaginationModel" ClickHandler="@PageButtonClick" />
    }
}

@functions
{
    private TorrentsViewModel Model { get; set; }
    private string Search { get; set; }
    private int Page { get; set; }
    private const string quearyTemplate = "/torrents?search={0}&page={1}";

    protected override async Task OnInitAsync()
    {
        await RefreshType();

        UriHelper.OnLocationChanged += OnLocationChanges;
    }

    private void OnLocationChanges(object sender, string location) => RefreshType().GetAwaiter();

    private async Task RefreshType()
    {
        var uri = new Uri(UriHelper.GetAbsoluteUri());

        Search = QueryHelpers.ParseQuery(uri.Query).TryGetValue("search", out var searchParam)
            ? searchParam.FirstOrDefault()
            : null;

        Page = QueryHelpers.ParseQuery(uri.Query).TryGetValue("page", out var pageParam)
               && int.TryParse(pageParam.FirstOrDefault(), out var pageParamId)
               && pageParamId > 1
               ? pageParamId
               : 1;

        await LoadTorrentsAsync();
        StateHasChanged();
    }

    private async Task LoadTorrentsAsync() => Model = await Client.GetTorrentsAsync(Page, Constants.DefaultPageSize, Search);

    private void TorrentDetailsClick(long id) => UriHelper.NavigateTo($"/torrent/{id}");

    private void PageButtonClick(int page) => UriHelper.NavigateTo(string.Format(quearyTemplate, Search, page));

    private void SearchButtonClick(string search) => UriHelper.NavigateTo(string.Format(quearyTemplate, search, 1));

    public void Dispose() => UriHelper.OnLocationChanged -= OnLocationChanges;
}