@page "/torrents"
@implements IDisposable
@inject TorrentServiceClient Client
@inject IUriHelper UriHelper

<div class="row">
    <div class="col-lg-3 pb-3">
        <Filtration Model="@FilterModel" ChangedHandler="@FilterApplyButtonClick" />
    </div>

    <div class="col-lg-9">
        @if (Model == null)
        {
            <Loader />
        }
        else
        {
            <TorrentTable Items="@Model.TorrentItems" />

            <Pagination Model="@Model.PaginationModel" PageChanged="@PageButtonClick" />
        }
    </div>
</div>

@functions
{
    private TorrentsViewModel Model { get; set; }
    private FiltrationViewModel FilterModel { get; set; } = new FiltrationViewModel();
    private int Page { get; set; }
    private int PageSize { get; set; }
    private const string quearyTemplate = "/torrents?search={0}&page={1}";

    protected override async Task OnInitAsync()
    {
        await RefreshType();
        UriHelper.OnLocationChanged += OnLocationChanges;
    }

    private async void OnLocationChanges(object sender, string location) => await RefreshType();

    private async Task RefreshType()
    {
        var uriQuery = new Uri(UriHelper.GetAbsoluteUri()).Query;

        Page = QueryHelpers.ParseQuery(uriQuery).TryGetValue("page", out var pageParam)
               && int.TryParse(pageParam.FirstOrDefault(), out var pageParamId)
               && pageParamId > 1
               ? pageParamId
               : 1;

        PageSize = Constants.DEFAULT_PAGE_SIZE;

        FilterModel.Search = QueryHelpers.ParseQuery(uriQuery).TryGetValue("search", out var searchParam)
            ? searchParam.FirstOrDefault()
            : null;

        await LoadTorrentsAsync();

        StateHasChanged();
    }

    private async Task LoadTorrentsAsync() => Model = await Client.GetTorrentsAsync(Page, PageSize, FilterModel);

    private void TorrentDetailsClick(long id) => UriHelper.NavigateTo($"/torrent/{id}");
    private void PageButtonClick(int page) => UriHelper.NavigateTo(string.Format(quearyTemplate, FilterModel.Search, page));
    private void FilterApplyButtonClick() => UriHelper.NavigateTo(string.Format(quearyTemplate, FilterModel.Search, 1));

    public void Dispose() => UriHelper.OnLocationChanged -= OnLocationChanges;
}