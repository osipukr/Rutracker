@page "/"
@page "/torrents"

@inject IMatToaster MatToaster
@inject AppStateService AppState
@inject ViewSettings ViewSettings

@if (Model != null)
{
    <Filtration Model="@Filter" FilterChanged="@FilterChanged" />
    <TorrentList Items="@Model.TorrentItems" />
    <Pagination Model="@Model.PaginationModel" PageChanged="@PageChanged" />
}
else if (AppState.SearchInProgress)
{
    <LoadingBackground>
        <span>Loading page model, please wait...</span>
    </LoadingBackground>
}
else
{
    <LoadingBackground ShowLoader="false">
        <p>Failed to load page model</p>
        <MatButton Raised="true" OnClick="@RetryLoad">Try again</MatButton>
    </LoadingBackground>
}

@code
{
    TorrentsIndexViewModel Model { get; set; }
    FiltrationViewModel Filter { get; set; } = new FiltrationViewModel();
    int Page { get; set; } = 1;
    int PageSize => ViewSettings.ItemsPerPageCount;

    protected override async Task OnInitAsync() => await LoadTorrentsIndexAsync(Page, Filter);

    async Task LoadTorrentsIndexAsync(int page, FiltrationViewModel filter)
    {
        try
        {
            Model = await AppState.GetTorrentsIndexAsync(page, ViewSettings.ItemsPerPageCount, filter);
        }
        catch (Exception ex)
        {
            MatToaster.Add(ex.Message, MatToastType.Danger, "Model Load Failed", MatIconNames.Warning);
        }
    }

    async Task RetryLoad() => await LoadTorrentsIndexAsync(Page, Filter);
    async Task PageChanged(int page) => await LoadTorrentsIndexAsync(Page = page, Filter);
    async Task FilterChanged(FiltrationViewModel filter) => await LoadTorrentsIndexAsync(Page = 1, Filter = filter);
}