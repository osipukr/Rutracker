@attribute [Authorize]

@inject AppState AppState
@inject IMatToaster MatToaster
@inject IModalService ModalService

@page "/account/profile"

@if (AppState.SearchInProgress)
{
<LoadingBackground>
    <span>Loading user list, please wait...</span>
</LoadingBackground>
}
else if (UserModel == null)
{
<LoadingBackground ShowLoader="false">
    <p>Error load profile, sorry</p>
</LoadingBackground>
}
else
{
<div class="profile-container">
    <div class="profile-header">
        @if (IsValidUserImage())
        {
        <img class="profile-header__image" src="@UserModel.ImageUrl" alt=" user image" />
        }
        else
        {
        <img class="profile-header__image" src="img/profile-bg.jpg" alt="default user image" />
        }

        <h1 class="profile-header__name">@UserModel.UserName</h1>
    </div>
    <div class="profile-body">
        <MatTabGroup>
            <MatTab>
                <LabelContent>Personal info</LabelContent>
                <ChildContent>
                    <div class="form-group">
                        <MatTextField Value="@UserModel.UserName"
                                      Label="User Name"
                                      Icon="@MatIconNames.Person"
                                      IconTrailing="true"
                                      FullWidth="true"
                                      ReadOnly="true" />
                    </div>

                    <div class="form-group">
                        <MatTextField Value="@UserModel.Email"
                                      Label="User Name"
                                      Icon="@MatIconNames.Mail_outline"
                                      IconTrailing="true"
                                      FullWidth="true"
                                      ReadOnly="true" />
                    </div>

                    <div class="form-group">
                        <MatTextField Value="@UserModel.FirstName"
                                      Label="User Name"
                                      FullWidth="true"
                                      ReadOnly="true" />
                    </div>
                    <div class="form-group">
                        <MatTextField Value="@UserModel.LastName"
                                      Label="User Name"
                                      FullWidth="true"
                                      ReadOnly="true" />
                    </div>

                    <div class="form-group mt-4 d-flex justify-content-end">
                        <MatButton Raised="true" Label="Upload image" Class="mx-2" />
                        <MatButton OnClick="@EditUserClicked" Raised="true" Label="Edit profile" Class="mx-2" />
                    </div>
                </ChildContent>
            </MatTab>
        </MatTabGroup>
    </div>
</div>
}

@code
{
    private UserViewModel UserModel { get; set; }

    protected override async Task OnInitAsync() => await LoadUserModelAsync();

    private async Task LoadUserModelAsync()
    {
        try
        {
            UserModel = await AppState.UserDetails();
        }
        catch (Exception ex)
        {
            MatToaster.Add(ex.Message, MatToastType.Warning, "Error load user");
        }
    }

    private void EditUserClicked()
    {
        var parameters = new ModalParameters();

        parameters.Add(nameof(EditUserViewModel), new EditUserViewModel
        {
            Email = UserModel.Email,
            FirstName = UserModel.FirstName,
            LastName = UserModel.LastName,
            ImageUrl = UserModel.ImageUrl
        });

        ModalService.OnClose += ModalClosed;
        ModalService.Show("Edit profile", typeof(EditProfile), parameters);
    }

    private void ModalClosed(ModalResult result)
    {
        if (!result.Cancelled && result.Data is EditUserViewModel user)
        {
            UserModel.Email = user.Email;
            UserModel.FirstName = user.FirstName;
            UserModel.LastName = user.LastName;
            UserModel.ImageUrl = user.ImageUrl;

            StateHasChanged();
        }

        ModalService.OnClose -= ModalClosed;
    }

    private bool IsValidUserImage() => !string.IsNullOrWhiteSpace(UserModel.ImageUrl);
}