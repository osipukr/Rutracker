@attribute [Authorize]

@inject AppState AppState
@inject IMatToaster MatToaster
@inject IModalService ModalService

@page "/account/profile"

@if (AppState.SearchInProgress)
{
    <LoadingBackground>
        <span>Loading user list, please wait...</span>
    </LoadingBackground>
}
else if (UserModel == null)
{
    <LoadingBackground ShowLoader="false">
        <p>Error load profile, sorry</p>
    </LoadingBackground>
}
else
{
    <div class="mat-layout-grid">
        <div class="mat-layout-grid-inner">
            <div class="mat-layout-grid-cell mat-layout-grid-cell-span-4 mat-elevation-z5">
                <MatCard Class="h-100">
                    <MatCardContent>
                        <MatCardMedia Wide="true" ImageUrl="https://avatars1.githubusercontent.com/u/40744739?s=460&v=4" />

                        <div>
                            <MatHeadline6>@UserModel.UserName</MatHeadline6>
                            <MatSubtitle2>Here should user role :)</MatSubtitle2>
                        </div>
                    </MatCardContent>
                    <MatCardActions>
                        <MatCardActionButtons>
                            <div class="d-flex flex-column w-100">
                                <MatButton OnClick="@EditUserClicked" Outlined="true" Label="Edit profile" />
                            </div>
                        </MatCardActionButtons>
                    </MatCardActions>
                </MatCard>
            </div>

            <div class="mat-layout-grid-cell mat-layout-grid-cell-span-8 mat-elevation-z5">
                <MatList SingleSelection="true" TwoLine="true">
                    <MatListItem>
                        <MatListItemText>
                            <MatListItemPrimaryText>User Name</MatListItemPrimaryText>
                            <MatListItemSecondaryText>@UserModel.UserName</MatListItemSecondaryText>
                        </MatListItemText>
                    </MatListItem>

                    <MatListItem>
                        <MatListItemText>
                            <MatListItemPrimaryText>Email</MatListItemPrimaryText>
                            <MatListItemSecondaryText>@UserModel.Email</MatListItemSecondaryText>
                        </MatListItemText>
                    </MatListItem>

                    <MatListItem>
                        <MatListItemText>
                            <MatListItemPrimaryText>First Name</MatListItemPrimaryText>
                            <MatListItemSecondaryText>@UserModel.FirstName</MatListItemSecondaryText>
                        </MatListItemText>
                    </MatListItem>

                    <MatListItem>
                        <MatListItemText>
                            <MatListItemPrimaryText>Last Name</MatListItemPrimaryText>
                            <MatListItemSecondaryText>@UserModel.LastName</MatListItemSecondaryText>
                        </MatListItemText>
                    </MatListItem>
                </MatList>
            </div>
        </div>
    </div>
}

@code
{
    private UserViewModel UserModel { get; set; }

    protected override async Task OnInitAsync() => await LoadUserModelAsync();

    private async Task LoadUserModelAsync()
    {
        try
        {
            UserModel = await AppState.UserDetails();
        }
        catch (Exception ex)
        {
            MatToaster.Add(ex.Message, MatToastType.Warning, "Error load user");
        }
    }

    private void EditUserClicked()
    {
        var parameters = new ModalParameters();

        parameters.Add(nameof(EditUserViewModel), new EditUserViewModel
        {
            FirstName = UserModel.FirstName,
            LastName = UserModel.LastName,
            ImageUrl = UserModel.ImageUrl
        });

        ModalService.OnClose += ModalClosed;
        ModalService.Show("Edit profile", typeof(EditProfile), parameters);
    }

    private void ModalClosed(ModalResult result)
    {
        if (!result.Cancelled && result.Data is EditUserViewModel user)
        {
            UserModel.FirstName = user.FirstName;
            UserModel.LastName = user.LastName;
            UserModel.ImageUrl = user.ImageUrl;

            StateHasChanged();
        }

        ModalService.OnClose -= ModalClosed;
    }
}