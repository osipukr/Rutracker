@page "/torrent/{id:long}"
@inject TorrentServiceClient Client
@inject IUriHelper UriHelper

@if (Model == null)
{
    <Loader />
}
else
{
    <div class="card text-center mb-3">
        <div class="card-header py-3"></div>

        <div class="card-body">
            <button class="btn btn-primary"
                    onclick="@BackToButtonClick">
                Back to full torrents list
            </button>
        </div>

        <div class="card-footer text-muted py-3"></div>
    </div>

    @if (Model.TorrentDetailsItem == null)
    {
        <h1 class="text-center">Torrent not found ;(</h1>
    }
    else
    {
        var torrent = Model.TorrentDetailsItem;

        <div class="card mb-2 shadow-sm">
            <div class="card-body">
                <span class="badge badge-primary">Id</span> - @torrent.Id
            </div>
        </div>

        <div class="card mb-2 shadow-sm">
            <div class="card-body">
                <span class="badge badge-primary">Title</span> - @torrent.Title
            </div>
        </div>

        <div class="card mb-2 shadow-sm">
            <div class="card-body">
                <span class="badge badge-primary">Size</span> - @torrent.Size bytes
            </div>
        </div>

        <div class="card mb-2 shadow-sm">
            <div class="card-body">
                <span class="badge badge-primary">Date</span> - @torrent.Date.ToLongDateString()
            </div>
        </div>

        <div class="card mb-2 shadow-sm">
            <div class="card-body">
                <span class="badge badge-primary">Hash</span> - @torrent.Hash
            </div>
        </div>

        <div class="card mb-2 shadow-sm">
            <div class="card-body">
                <span class="badge badge-primary">Forum title</span> - @torrent.ForumTitle
            </div>
        </div>

        <div class="card mb-2 shadow-sm">
            <div class="card-body">
                <span class="badge badge-primary">Is deleted</span> - @(torrent.IsDeleted ? "Yes" : "No")
            </div>
        </div>

        @if (torrent.Files.Any())
        {
            <div class="card mb-2 shadow-sm">
                <div class="card-body">
                    <span class="badge badge-primary mb-2">Files</span>

                    <ul class="list-group">
                        @foreach (var file in torrent.Files)
                        {
                            <li class="list-group-item rounded">
                                <span class="badge badge-primary">Name:</span> @file.Name <br />
                                <span class="badge badge-primary">Size:</span> @file.Size
                            </li>
                        }
                    </ul>
                </div>
            </div>
        }

        <div class="card mb-3 shadow-sm">
            <div class="card-body">@((MarkupString)torrent.Content)</div>
        </div>
    }
}

@functions
{
    [Parameter] protected long Id { get; set; }
    private TorrentIndexViewModel Model { get; set; }

    protected override async Task OnInitAsync() => await LoadTorrentAsync();

    private async Task LoadTorrentAsync() => Model = await Client.GetTorrentAsync(Id);

    private void BackToButtonClick() => UriHelper.NavigateTo("/torrents");
}