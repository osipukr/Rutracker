@page "/torrents/{id:long}"

@inject ITorrentsClientService Client
@inject IUriHelper UriHelper
@inject IMatToaster MatToaster

@if (!SearchTask.IsCompleted)
{
    <LoadingBackground>
        <span>Loading page model, please wait...</span>
    </LoadingBackground>
}
else if (Model == null || Model.TorrentDetailsItem == null)
{
    <LoadingBackground ShowLoader="false">
        <p>Torrent with id @Id not found</p>
        <MatButton Link="@UriHelper.ToAbsoluteUri("/").AbsoluteUri" Raised="true">
            Return to full torrents list
        </MatButton>
    </LoadingBackground>
}
else
{
    <div class="mat-layout-grid px-0 pb-5">
        <div class="mat-layout-grid-inner">
            <div class="mat-layout-grid-cell"></div>
            <div class="mat-layout-grid-cell"></div>
            <div class="mat-layout-grid-cell">
                <MatButton Link="@UriHelper.ToAbsoluteUri("/torrents").AbsoluteUri"
                           Raised="true"
                           Class="w-100 mat-elevation-z10">
                    Back
                </MatButton>
            </div>
        </div>
    </div>

    <TorrentDetails Model="@Model.TorrentDetailsItem"></TorrentDetails>
}

@functions
{
    [Parameter] long Id { get; set; }

    TorrentIndexViewModel Model { get; set; }
    Task<TorrentIndexViewModel> SearchTask { get; set; }

    protected override async Task OnInitAsync() => await LoadTorrentIndexAsync();

    async Task LoadTorrentIndexAsync()
    {
        try
        {
            SearchTask = Client.GetTorrentIndexAsync(Id);
            Model = await SearchTask;
        }
        catch (Exception ex)
        {
            MatToaster.Add(ex.Message, MatToastType.Danger, "Model Load Failed");
        }
    }

    void BackToButtonClicked() => UriHelper.NavigateTo("/torrents");
}