@page "/torrent/{id:long}"
@inject ITorrentsClientService Client
@inject IUriHelper UriHelper

@if (Model == null)
{
    <LoadSpinner />
}
else
{
    <div class="card text-center mb-3">
        <div class="card-body">
            <button class="btn btn-outline-primary" @onclick="@BackToButtonClick">
                Back to full torrents list
            </button>
        </div>
    </div>

    @if (Model.TorrentDetailsItem == null)
    {
        <h1 class="text-center">Torrent not found ;(</h1>
    }
    else
    {
        var torrent = Model.TorrentDetailsItem;

        <div class="card mb-2 shadow-sm">
            <div class="card-body">
                <span class="badge badge-primary">Id</span> - @torrent.Id
            </div>
        </div>

        <div class="card mb-2 shadow-sm">
            <div class="card-body">
                <span class="badge badge-primary">Title</span> - @torrent.Title
            </div>
        </div>

        <div class="card mb-2 shadow-sm">
            <div class="card-body">
                <span class="badge badge-primary">Size</span> - @torrent.Size bytes
            </div>
        </div>

        <div class="card mb-2 shadow-sm">
            <div class="card-body">
                <span class="badge badge-primary">Date</span> - @torrent.Date.ToLongDateString()
            </div>
        </div>

        <div class="card mb-2 shadow-sm">
            <div class="card-body">
                <span class="badge badge-primary">Hash</span> - @torrent.Hash
            </div>
        </div>

        <div class="card mb-2 shadow-sm">
            <div class="card-body">
                <span class="badge badge-primary mb-2">Forum</span>

                <ul class="list-group">
                    <li class="list-group-item mb-1 rounded">
                        <p class="m-0"><span class="badge badge-primary">Id:</span> @torrent.Forum.Id</p>
                    </li>

                    <li class="list-group-item rounded">
                        <p class="m-0"><span class="badge badge-primary">Title:</span> @torrent.Forum.Title</p>
                    </li>
                </ul>
            </div>
        </div>

        <div class="card mb-2 shadow-sm">
            <div class="card-body">
                <span class="badge badge-primary">Is deleted</span> - @(torrent.IsDeleted ? "Yes" : "No")
            </div>
        </div>

        <FileList Items="@torrent.Files" />

        <div class="card mb-3 shadow-sm">
            <div class="card-body">@((MarkupString)torrent.Content)</div>
        </div>
    }
}

@code
{
    [Parameter] long Id { get; set; }

    TorrentIndexViewModel Model { get; set; }

    protected override async Task OnInitAsync() => Model = await Client.GetTorrentIndexAsync(Id);

    void BackToButtonClick() => UriHelper.NavigateTo("/torrents");
}