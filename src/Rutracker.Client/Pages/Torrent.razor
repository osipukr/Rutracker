@page "/torrent/{id:long}"
@inject ITorrentsClientService Client
@inject IUriHelper UriHelper

@if (Model == null)
{
    <LoadSpinner />
}
else
{
    <div class="card text-center mb-3">
        <div class="card-body">
            <button class="btn btn-outline-primary" onclick="@BackToButtonClick">
                Back to full torrents list
            </button>
        </div>
    </div>

    @if (Model.TorrentDetailsItem == null)
    {
        <h1 class="text-center">Torrent not found ;(</h1>
    }
    else
    {
        var torrent = Model.TorrentDetailsItem;

        <div class="card mb-2 shadow-sm">
            <div class="card-body">
                <span class="badge badge-primary">Id</span> - @torrent.Id
            </div>
        </div>

        <div class="card mb-2 shadow-sm">
            <div class="card-body">
                <span class="badge badge-primary">Title</span> - @torrent.Title
            </div>
        </div>

        <div class="card mb-2 shadow-sm">
            <div class="card-body">
                <span class="badge badge-primary">Size</span> - @torrent.Size bytes
            </div>
        </div>

        <div class="card mb-2 shadow-sm">
            <div class="card-body">
                <span class="badge badge-primary">Date</span> - @torrent.Date.ToLongDateString()
            </div>
        </div>

        <div class="card mb-2 shadow-sm">
            <div class="card-body">
                <span class="badge badge-primary">Hash</span> - @torrent.Hash
            </div>
        </div>

        <div class="card mb-2 shadow-sm">
            <div class="card-body">
                <span class="badge badge-primary mb-2">Forum</span>

                <ul class="list-group">
                    <li class="list-group-item mb-1 rounded">
                        <p class="m-0"><span class="badge badge-primary">Id:</span> @torrent.Forum.Id</p>
                    </li>

                    <li class="list-group-item rounded">
                        <p class="m-0"><span class="badge badge-primary">Title:</span> @torrent.Forum.Title</p>
                    </li>
                </ul>
            </div>
        </div>

        <div class="card mb-2 shadow-sm">
            <div class="card-body">
                <span class="badge badge-primary">Is deleted</span> - @(torrent.IsDeleted ? "Yes" : "No")
            </div>
        </div>

        @if (torrent.Files == null || torrent.Files.Length == 0)
        {

        }
        else
        {
            <div class="card mb-2 shadow-sm">
                <div class="card-body">
                    <div class="@(_collapseFiles ? null : "mb-2")">
                        <span class="badge badge-primary">Files</span> -
                        <button class="btn btn-primary btn-sm" onclick="@ToggleButtonClick">Show / Hide</button>
                    </div>

                    <ul class="list-group list-group-horizontal flex-wrap justify-content-around align-items-center @CollapseCssClass">
                        @foreach (var file in torrent.Files)
                        {
                            <li class="list-group-item list-group-item-action m-1 w-auto rounded">
                                <p class="m-0" title="@file.Name"><span class="badge badge-primary">Name:</span> @file.Name</p>
                                <p class="m-0" title="@file.Size"><span class="badge badge-primary">Size:</span> @file.Size bytes</p>
                            </li>
                        }
                    </ul>
                </div>
            </div>
        }

        <div class="card mb-3 shadow-sm">
            <div class="card-body">@((MarkupString)torrent.Content)</div>
        </div>
    }
}

@functions
{
    [Parameter] protected long Id { get; set; }

    private TorrentIndexViewModel Model { get; set; }
    private bool _collapseFiles = true;

    private string CollapseCssClass => _collapseFiles ? "collapse" : null;

    protected override async Task OnInitAsync() => await LoadTorrentIndexAsync();

    private async Task LoadTorrentIndexAsync() => Model = await Client.GetTorrentIndexAsync(Id);

    private void ToggleButtonClick() => _collapseFiles = !_collapseFiles;

    private void BackToButtonClick() => UriHelper.NavigateTo("/torrents");
}