@inject TorrentServiceClient Client
@inject IUriHelper UriHelper

<EditForm Model="@Model" OnValidSubmit="@ApplyButtonClick">
    <DataAnnotationsValidator />

    <FilterCard Class="filter-card" Title="Search">
        <div class="form-row">
            <div class="input-group">
                <InputSearch bind-Value="@Model.Search" Class="form-control w-100" Placeholder="Search" />
                <ValidationMessage For="@(() => Model.Search)" />
            </div>
        </div>
    </FilterCard>

    <FilterCard Class="filter-card" Title="Range size">
        <div class="form-row">
            <div class="col-md-6 col-6">
                <label class="w-100">
                    Min size
                    <InputNumber bind-Value="@Model.SizeFrom" Class="form-control" />
                </label>
            </div>
            <div class="col-md-6 col-6 text-right">
                <label class="w-100">
                    Max size
                    <InputNumber bind-Value="@Model.SizeTo" Class="form-control" />
                </label>
            </div>

            <ValidationMessage For="@(() => Model.SizeFrom)" />
            <ValidationMessage For="@(() => Model.SizeTo)" />
        </div>
    </FilterCard>

    <FilterCard Class="filter-card" Title="Forum titles category">
        @if (TitleFacets == null)
        {
            <LoadSpinner />
        }
        else
        {
            foreach (var facet in TitleFacets)
            {
                <div class="custom-control custom-checkbox title-facet">
                    <span class="float-right badge badge-primary">@facet.Count</span>

                    <InputCheckbox bind-Value="@facet.IsSelected"
                                   Class="custom-control-input d-none"
                                   Id="@facet.Id" />

                    <label class="custom-control-label h-100"
                           for="@facet.Id"
                           title="@facet.Value">
                        @facet.Value
                    </label>
                </div>
            }
        }
    </FilterCard>

    <div class="card filter-card">
        <div class="card-footer border-top-0">
            <div class="row">
                <div class="col-6">
                    <button class="btn btn-outline-primary w-100" type="submit">Apply</button>
                </div>

                <div class="col-6">
                    <button class="btn btn-outline-primary w-100"
                            onclick="@ResetButtonClick"
                            type="reset">
                        All
                    </button>
                </div>
            </div>
        </div>
    </div>
</EditForm>

@functions
{
    [Parameter] protected FiltrationViewModel Model { get; set; }
    [Parameter] protected Action ChangedHandler { get; set; }

    private int TitleCount { get; set; }
    private FacetItemViewModel[] TitleFacets { get; set; }

    protected override async Task OnInitAsync()
    {
        TitleCount = Constants.ForumTitlesCount;
        TitleFacets = await Client.GetTitlesAsync(TitleCount);
    }

    private void ApplyButtonClick()
    {
        Model.SelectedTitles = TitleFacets?.Where(x => x.IsSelected).Select(x => x.Id).ToArray();
        ChangedHandler?.Invoke();
    }

    private void ResetButtonClick()
    {
        Model.SelectedTitles = default;
        Model.SizeFrom = Model.SizeTo = default;

        if (TitleFacets != null)
        {
            foreach (var facet in TitleFacets)
            {
                facet.IsSelected = false;
            }
        }

        UriHelper.NavigateTo("/torrents");
    }
}