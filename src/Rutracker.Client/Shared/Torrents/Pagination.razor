@inject AppStateService AppState

@if (Model != null)
{
    <div class="mat-layout-grid px-0 py-3">
        <div class="mat-layout-grid-inner">
            <div class="mat-layout-grid-cell mat-layout-grid-cell-span-12">
                <div class="mdc-paginator">
                    <div class="mdc-paginator-container">
                        <div class="mdc-paginator-range-actions">
                            <span class="mdc-paginator-range-label">
                                @($"Page {Model.CurrentPage} of {Model.TotalPages}")
                            </span>

                            <div class="mdc-paginator-range-buttons">
                                <MatTooltip Tooltip="First page" Wrap="true">
                                    <MatIconButton Icon="@MatIconNames.First_page"
                                                   Disabled="@(AppState.SearchInProgress || Model.CurrentPage == 1)"
                                                   OnClick="@(_ => PageChangeClicked(1))" />
                                </MatTooltip>

                                <MatTooltip Tooltip="Previous page" Wrap="true">
                                    <MatIconButton Icon="@MatIconNames.Navigate_before"
                                                   Disabled="@(AppState.SearchInProgress || !Model.HasPrevious)"
                                                   OnClick="@(_ => PageChangeClicked(Model.CurrentPage - 1))" />
                                </MatTooltip>

                                <MatTooltip Tooltip="Next page" Wrap="true">
                                    <MatIconButton Icon="@MatIconNames.Navigate_next"
                                                   Disabled="@(AppState.SearchInProgress || !Model.HasNext)"
                                                   OnClick="@(_ => PageChangeClicked(Model.CurrentPage + 1))" />
                                </MatTooltip>

                                <MatTooltip Tooltip="Last page" Wrap="true">
                                    <MatIconButton Icon="@MatIconNames.Last_page"
                                                   Disabled="@(AppState.SearchInProgress || Model.CurrentPage == Model.TotalPages)"
                                                   OnClick="@(_ => PageChangeClicked(Model.TotalPages))" />
                                </MatTooltip>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code
{
    [Parameter] PaginationViewModel Model { get; set; }
    [Parameter] EventCallback<int> PageChanged { get; set; }

    void PageChangeClicked(int page) => PageChanged.InvokeAsync(page);
}