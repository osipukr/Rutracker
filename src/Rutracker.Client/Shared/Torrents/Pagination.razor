@inject ViewSettings ViewSettings

@if (Model == null)
{

}
else
{
    <nav class="d-flex flex-column align-items-center">
        @if (Model.TotalItems > 0)
        {
            <ul class="pagination flex-wrap justify-content-center no-select">
                <li class="page-item @(Model.CurrentPage == 1 ? "disabled" : null)">
                    <button class="page-link" @onclick="@(_ => PageChanged.InvokeAsync(1))">
                        Begin
                    </button>
                </li>

                <li class="page-item @(Model.HasPrevious ? null : "disabled")">
                    <button class="page-link" @onclick="@(_ => PageChanged.InvokeAsync(Model.CurrentPage - 1))">
                        <span aria-hidden="true">&#171;</span>
                        <span class="sr-only">Previous</span>
                    </button>
                </li>

                @for (var i = StartIndex; i <= FinishIndex; i++)
                {
                    var currentIndex = i;

                    if (i == Model.CurrentPage)
                    {
                        <li class="page-item active">
                            <span class="page-link">
                                @i
                                <span class="sr-only">(current)</span>
                            </span>
                        </li>
                    }
                    else
                    {
                        <li class="page-item">
                            <button class="page-link" @onclick="@(_ => PageChanged.InvokeAsync(currentIndex))">
                                @i
                            </button>
                        </li>
                    }
                }

                <li class="page-item @(Model.HasNext ? null : "disabled")">
                    <button class="page-link" @onclick="@(_ => PageChanged.InvokeAsync(Model.CurrentPage + 1))">
                        <span aria-hidden="true">&#187;</span>
                        <span class="sr-only">Next</span>
                    </button>
                </li>

                <li class="page-item @(Model.CurrentPage == Model.TotalPages ? "disabled" : null)">
                    <button class="page-link" @onclick="@(_ => PageChanged.InvokeAsync(Model.TotalPages))">
                        End
                    </button>
                </li>
            </ul>

            <p class="m-0">Page: @Model.CurrentPage of @Model.TotalPages</p>
            <p class="m-0">Total items: @Model.TotalItems</p>
        }
    </nav>
}

@code
{
    [Parameter] PaginationViewModel Model { get; set; }
    [Parameter] EventCallback<int> PageChanged { get; set; }

    int StartIndex { get; set; }
    int FinishIndex { get; set; }

    protected override void OnParametersSet()
    {
        if (Model == null)
        {
            return;
        }

        var buttonCount = ViewSettings.PaginationButtonCount;
        var before = (int)Math.Floor(buttonCount / 2.0);
        var after = (int)Math.Ceiling(buttonCount / 2.0) - 1;

        if (Model.CurrentPage <= before)
        {
            StartIndex = 1;
            FinishIndex = Math.Min(buttonCount, Model.TotalPages);
        }
        else if (Model.CurrentPage + after >= Model.TotalPages)
        {
            StartIndex = Math.Max(Model.TotalPages - buttonCount + 1, 1);
            FinishIndex = Model.TotalPages;
        }
        else
        {
            StartIndex = Model.CurrentPage - before;
            FinishIndex = Model.CurrentPage + after;
        }
    }
}