@inject ITorrentsClientService Client
@inject ViewSettings ViewSettings

<EditForm Model="@Model" OnValidSubmit="@ApplyButtonClick">
    <DataAnnotationsValidator />

    <MatAccordion Multi="true">
        <MatExpansionPanel>
            <MatExpansionPanelSummary>
                <MatExpansionPanelHeader>Search</MatExpansionPanelHeader>
            </MatExpansionPanelSummary>
            <MatExpansionPanelDetails>
                <InputSearch @bind-Value="@Model.Search" Placeholder="Search" />

                <ValidationMessage For="@(() => Model.Search)" />
            </MatExpansionPanelDetails>
        </MatExpansionPanel>

        <MatExpansionPanel>
            <MatExpansionPanelSummary>
                <MatExpansionPanelHeader>Size range</MatExpansionPanelHeader>
            </MatExpansionPanelSummary>
            <MatExpansionPanelDetails>
                <InputNumber @bind-Value="@Model.SizeFrom" Class="form-control" />
                <InputNumber @bind-Value="@Model.SizeTo" Class="form-control" />

                <ValidationMessage For="@(() => Model.SizeFrom)" />
                <ValidationMessage For="@(() => Model.SizeTo)" />
            </MatExpansionPanelDetails>
        </MatExpansionPanel>

        <MatExpansionPanel>
            <MatExpansionPanelSummary>
                <MatExpansionPanelHeader>Forum titles category</MatExpansionPanelHeader>
            </MatExpansionPanelSummary>
            <MatExpansionPanelDetails>
                @if (TitleFacet == null || TitleFacet.FacetItems == null)
                {
                    <LoadSpinner />
                }
                else
                {
                    foreach (var facet in TitleFacet.FacetItems)
                    {
                        <InputCheckbox @bind-Value="@facet.IsSelected" Id="@facet.Id" />
                    }
                }
            </MatExpansionPanelDetails>
        </MatExpansionPanel>
    </MatAccordion>

    @if (SearchTask.IsCompleted && TitleFacet != null && TitleFacet.FacetItems != null)
    {
        <div class="col-6">
            <button class="btn btn-outline-primary w-100" type="submit">Apply</button>
        </div>

        <div class="col-6">
            <button class="btn btn-outline-primary w-100"
                    @onclick="@ResetButtonClick"
                    type="reset">
                All
            </button>
        </div>
    }
    else
    {
        <div class="col-6">
            <button class="btn btn-outline-primary w-100 h-100 d-flex justify-content-center align-items-center" type="button" disabled>
                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                <span class="sr-only">Loading...</span>
            </button>
        </div>

        <div class="col-6">
            <button class="btn btn-outline-primary w-100" type="button" disabled>
                All
            </button>
        </div>
    }
</EditForm>

@code
{
    [Parameter] FiltrationViewModel Model { get; set; }
    [Parameter] EventCallback ChangedHandler { get; set; }
    [Parameter] Task<TorrentsIndexViewModel> SearchTask { get; set; }

    int TitleCount { get; set; }
    FacetViewModel<string> TitleFacet { get; set; }

    protected override async Task OnInitAsync()
    {
        TitleCount = ViewSettings.ForumTitlesCount;
        TitleFacet = await Client.GetTitlesAsync(TitleCount);
    }

    void ResetFiltrationModel()
    {
        Model.Search = null;
        Model.SelectedTitleIds = null;
        Model.SizeFrom = null;
        Model.SizeTo = null;

        foreach (var facet in TitleFacet.FacetItems)
        {
            facet.IsSelected = false;
        }
    }

    void ApplyButtonClick()
    {
        Model.SelectedTitleIds = TitleFacet.FacetItems.Where(x => x.IsSelected).Select(x => x.Id);

        ChangedHandler.InvokeAsync(EventArgs.Empty);
    }

    void ResetButtonClick()
    {
        ResetFiltrationModel();
        ApplyButtonClick();
    }
}