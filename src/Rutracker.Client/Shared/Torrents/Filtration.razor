@inject ITorrentsClientService Client
@inject IMatToaster MatToaster
@inject ViewSettings ViewSettings

<EditForm Model="@Model" OnValidSubmit="@ApplyButtonClick">
    <DataAnnotationsValidator />

    <MatTextField @bind-Value="@Model.Search"
                  Class="mb-3"
                  Label="Search"
                  Icon="search"
                  IconTrailing="true"
                  FullWidth="true">
    </MatTextField>

    <MatAccordion Multi="true">
        <MatExpansionPanel>
            <MatExpansionPanelSummary Class="no-select">
                <MatExpansionPanelHeader>Size range</MatExpansionPanelHeader>
            </MatExpansionPanelSummary>
            <MatExpansionPanelDetails>
                <MatNumericUpDownField Label="From"
                                       @bind-Value=@SizeFrom
                                       Icon="border_color"
                                       Outlined="true"
                                       DecimalPlaces=0
                                       Minimum=null Maximum=null>
                </MatNumericUpDownField>
                <MatNumericUpDownField Label="To"
                                       @bind-Value=@SizeTo
                                       Icon="border_color"
                                       Outlined="true"
                                       DecimalPlaces=0
                                       Minimum=null Maximum=null>
                </MatNumericUpDownField>
                <ValidationMessage For="@(() => Model.SizeFrom)" />
                <ValidationMessage For="@(() => Model.SizeTo)" />
            </MatExpansionPanelDetails>
        </MatExpansionPanel>

        <MatExpansionPanel>
            <MatExpansionPanelSummary Class="no-select">
                <MatExpansionPanelHeader>Forum titles category</MatExpansionPanelHeader>
            </MatExpansionPanelSummary>
            <MatExpansionPanelDetails>
                @if (TitleFacet != null && TitleFacet.FacetItems != null)
                {
                    foreach (var facet in TitleFacet.FacetItems)
                    {
                        <MatCheckbox @bind-Checked="@facet.IsSelected">
                            <span>@facet.Value - (Count: @facet.Count)</span>
                        </MatCheckbox>
                        <br />
                    }
                }
            </MatExpansionPanelDetails>
        </MatExpansionPanel>
    </MatAccordion>

    <div class="mat-layout-grid mat-layout-grid-align-right">
        <div class="mat-layout-grid-inner">
            <div class="mat-layout-grid-cell" style="grid-column-end: none">
                <MatButton Raised="true"
                           Type="reset"
                           OnClick="@(_ => ResetButtonClick())">
                    All
                </MatButton>
                <MatButton Raised="true"
                           Type="submit">
                    Apply
                </MatButton>
            </div>
        </div>
    </div>
</EditForm>

@functions
{
    [Parameter] FiltrationViewModel Model { get; set; }
    [Parameter] EventCallback ChangedHandler { get; set; }

    decimal? SizeFrom
    {
        get => Model.SizeFrom;
        set => Model.SizeFrom = (long?)value;
    }

    decimal? SizeTo
    {
        get => Model.SizeTo;
        set => Model.SizeTo = (long?)value;
    }

    int TitleCount { get; set; }
    FacetViewModel<string> TitleFacet { get; set; }

    protected override async Task OnInitAsync()
    {
        TitleCount = ViewSettings.ForumTitlesCount;

        try
        {
            TitleFacet = await Client.GetTitlesAsync(TitleCount);
        }
        catch (Exception ex)
        {
            MatToaster.Add(ex.Message, MatToastType.Warning, "Titles Load Failed");
        }
    }

    void ResetFiltrationModel()
    {
        Model.Search = null;
        Model.SelectedTitleIds = null;
        Model.SizeFrom = null;
        Model.SizeTo = null;

        if (TitleFacet == null || TitleFacet.FacetItems == null)
        {
            return;
        }

        foreach (var facet in TitleFacet.FacetItems)
        {
            facet.IsSelected = false;
        }
    }

    void ApplyButtonClick()
    {
        Model.SelectedTitleIds = TitleFacet?.FacetItems?.Where(x => x.IsSelected).Select(x => x.Id);

        ChangedHandler.InvokeAsync(EventArgs.Empty);
    }

    void ResetButtonClick()
    {
        ResetFiltrationModel();
        ApplyButtonClick();
    }
}
