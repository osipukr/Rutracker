@inject ITorrentsClientService Client
@inject IMatToaster MatToaster
@inject ViewSettings ViewSettings

<EditForm Model="@Model" OnValidSubmit="@OnValidSubmitClicked">
    <DataAnnotationsValidator />

    <div class="mat-layout-grid p-0 px-4 mb-3">
        <div class="mat-layout-grid-inner">
            <div class="mat-layout-grid-cell mat-layout-grid-cell-span-12">
                <MatTextField @bind-Value="@Model.Search"
                              Label="Search"
                              Icon="search"
                              IconTrailing="true"
                              FullWidth="true">
                </MatTextField>
            </div>
            <div class="mat-layout-grid-cell mat-layout-grid-cell-span-12">
                <ValidationMessage For="@(() => Model.Search)" />
            </div>
        </div>
    </div>

    <MatAccordion Multi="true">
        <MatExpansionPanel>
            <MatExpansionPanelSummary Class="no-select">
                <MatExpansionPanelHeader>Size range</MatExpansionPanelHeader>
            </MatExpansionPanelSummary>
            <MatExpansionPanelDetails>
                <div class="mat-layout-grid p-0">
                    <div class="mat-layout-grid-inner">
                        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-6">
                            <MatNumericUpDownField Label="From"
                                                   @bind-Value=@SizeFrom
                                                   Icon="border_color"
                                                   Outlined="true"
                                                   FullWidth="true"
                                                   DecimalPlaces=0
                                                   Minimum=null Maximum=null>
                            </MatNumericUpDownField>
                        </div>
                        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-6">
                            <MatNumericUpDownField Label="To"
                                                   @bind-Value=@SizeTo
                                                   Icon="border_color"
                                                   Outlined="true"
                                                   FullWidth="true"
                                                   DecimalPlaces=0
                                                   Minimum=null Maximum=null>
                            </MatNumericUpDownField>
                        </div>

                        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-6">
                            <ValidationMessage For="@(() => Model.SizeFrom)" />
                        </div>
                        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-6">
                            <ValidationMessage For="@(() => Model.SizeTo)" />
                        </div>
                    </div>
                </div>
            </MatExpansionPanelDetails>
        </MatExpansionPanel>

        <MatExpansionPanel>
            <MatExpansionPanelSummary Class="no-select">
                <MatExpansionPanelHeader>Forum titles category</MatExpansionPanelHeader>
            </MatExpansionPanelSummary>
            <MatExpansionPanelDetails>
                @if (TitleFacet != null && TitleFacet.FacetItems != null)
                {
                    <div class="mat-layout-grid p-0">
                        <div class="mat-layout-grid-inner">
                            @foreach (var facet in TitleFacet.FacetItems)
                            {
                                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-12">
                                    <MatCheckbox @bind-Checked="@facet.IsSelected">
                                        <span>@facet.Value - (Count: @facet.Count)</span>
                                    </MatCheckbox>
                                </div>
                            }
                        </div>
                    </div>
                }
            </MatExpansionPanelDetails>
        </MatExpansionPanel>
    </MatAccordion>

    <div class="mat-layout-grid mat-layout-grid-align-right p-0 py-3">
        <div class="mat-layout-grid-inner">
            <div class="mat-layout-grid-cell mat-layout-grid-cell-span-12" style="grid-column-end: none">
                <MatButton OnClick="@ResetButtonClicked"
                           Outlined="true"
                           Type="reset"
                           Class="filter-btn">
                    All
                </MatButton>
                <MatButton OnClick="@OnSubmitClicked"
                           Raised="true"
                           Type="submit"
                           Class="filter-btn">
                    Apply
                </MatButton>
            </div>
        </div>
    </div>
</EditForm>

@functions
{
    [Parameter] FiltrationViewModel Model { get; set; }
    [Parameter] EventCallback ChangedHandler { get; set; }

    decimal? SizeFrom = null;
    decimal? SizeTo = null;

    int TitleCount { get; set; }
    FacetViewModel<string> TitleFacet { get; set; }

    protected override async Task OnInitAsync()
    {
        TitleCount = ViewSettings.ForumTitlesCount;
        await LoadTitleFacetsAsync();
    }

    async Task LoadTitleFacetsAsync()
    {
        try
        {
            TitleFacet = await Client.GetTitlesAsync(TitleCount);
        }
        catch (Exception ex)
        {
            MatToaster.Add(ex.Message, MatToastType.Warning, "Titles Load Failed");
        }
    }

    void ResetFiltrationModel()
    {
        Model.Search = null;
        Model.SizeFrom = null;
        Model.SizeTo = null;
        Model.SelectedTitleIds = null;
        SizeFrom = null;
        SizeTo = null;

        if (TitleFacet != null && TitleFacet.FacetItems != null)
        {
            foreach (var facet in TitleFacet.FacetItems)
            {
                facet.IsSelected = false;
            }
        }
    }

    void OnSubmitClicked()
    {
        Model.SizeFrom = (long?)SizeFrom;
        Model.SizeTo = (long?)SizeTo;
        Model.SelectedTitleIds = TitleFacet?.FacetItems?.Where(x => x.IsSelected).Select(x => x.Id);
    }

    void ResetButtonClicked()
    {
        ResetFiltrationModel();
        OnValidSubmitClicked();
    }

    void OnValidSubmitClicked() => ChangedHandler.InvokeAsync(EventArgs.Empty);
}