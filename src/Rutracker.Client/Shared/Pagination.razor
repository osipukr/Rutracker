<div class="d-flex flex-column align-items-center">
    @if (Model.TotalPages > 1)
    {
        <ul class="pagination flex-wrap justify-content-center">
            <li class="page-item @(Model.CurrentPage == 1 ? "disabled" : null)">
                <button class="page-link" onclick="@(_ => PageButtonClick(1))">
                    <span aria-hidden="true">&#171;</span>
                    <span class="sr-only">Begin</span>
                </button>
            </li>

            @for (var i = StartIndex; i <= FinishIndex; i++)
            {
                var currentIndex = i;

                if (i == Model.CurrentPage)
                {
                    <li class="page-item active">
                        <span class="page-link">
                            @i
                            <span class="sr-only">(current)</span>
                        </span>
                    </li>
                }
                else
                {
                    <li class="page-item">
                        <button class="page-link" onclick="@(_ => PageButtonClick(currentIndex))">
                            @i
                        </button>
                    </li>
                }
            }

            <li class="page-item @(Model.CurrentPage == Model.TotalPages ? "disabled" : null)">
                <button class="page-link" onclick="@(_ => PageButtonClick(Model.TotalPages))">
                    <span aria-hidden="true">&#187;</span>
                    <span class="sr-only">End</span>
                </button>
            </li>
        </ul>

        <p class="m-0">Page: @Model.CurrentPage of @Model.TotalPages</p>
    }

    @if (Model.TotalItems > 0)
    {
        <p class="m-0">Total items: @Model.TotalItems</p>
    }
</div>

@functions
{
    [Parameter] protected PaginationViewModel Model { get; set; }
    [Parameter] protected Action<int> PageChanged { get; set; }

    private int StartIndex { get; set; }
    private int FinishIndex { get; set; }

    protected override void OnParametersSet()
    {
        const int maxPages = Constants.PaginationCount;

        var beforePages = (int)Math.Floor(maxPages / 2.0);
        var afterPages = (int)Math.Ceiling(maxPages / 2.0) - 1;

        if (Model.CurrentPage <= beforePages)
        {
            StartIndex = 1;
            FinishIndex = Math.Min(maxPages, Model.TotalPages);
        }
        else if (Model.CurrentPage + afterPages >= Model.TotalPages)
        {
            StartIndex = Math.Max(Model.TotalPages - maxPages + 1, 1);
            FinishIndex = Model.TotalPages;
        }
        else
        {
            StartIndex = Model.CurrentPage - beforePages;
            FinishIndex = Model.CurrentPage + afterPages;
        }

        base.OnParametersSet();
    }

    private void PageButtonClick(int page) => PageChanged?.Invoke(page);
}