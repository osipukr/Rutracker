<div class="d-flex flex-column align-items-center">
    @if (Model.TotalPages > 1)
    {
        <ul class="pagination">
            <li class="page-item @(Model.CurrentPage == 1 ? "disabled" : "")">
                <button class="page-link" onclick="@(_ => PageButtonClick(1))">
                    <span aria-hidden="true">&laquo;</span>
                    <span class="sr-only">Begin</span>
                </button>
            </li>

            @for (var i = StartIndex; i <= FinishIndex; i++)
            {
                var currentIndex = i;

                if (i == Model.CurrentPage)
                {
                    <li class="page-item active">
                        <span class="page-link">
                            @i
                            <span class="sr-only">(current)</span>
                        </span>
                    </li>
                }
                else
                {
                    <li class="page-item">
                        <button class="page-link" onclick="@(_ => PageButtonClick(currentIndex))">
                            @i
                        </button>
                    </li>
                }
            }

            <li class="page-item @(Model.CurrentPage == Model.TotalPages ? "disabled" : "")">
                <button class="page-link" onclick="@(_ => PageButtonClick(Model.TotalPages))">
                    <span aria-hidden="true">&raquo;</span>
                    <span class="sr-only">End</span>
                </button>
            </li>
        </ul>

        <p class="m-0">Page: @Model.CurrentPage of @Model.TotalPages</p>
    }

    <p class="m-0">Total items: @Model.TotalItems</p>
</div>

@functions
{
    [Parameter] protected PaginationViewModel Model { get; set; }
    [Parameter] protected Action<int> PageChanged { get; set; }

    private int StartIndex { get; set; }
    private int FinishIndex { get; set; }

    protected override void OnParametersSet()
    {
        StartIndex = Math.Max(Model.CurrentPage - Constants.PaginationCount / 2, 1);
        FinishIndex = Math.Min(Model.CurrentPage + Constants.PaginationCount / 2, Model.TotalPages);

        base.OnParametersSet();
    }

    private void PageButtonClick(int page) => PageChanged?.Invoke(page);
}