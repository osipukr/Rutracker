@inject PathHelper PathHelper

<ListItem Button
          Class="Subcategory-Item-Root"
          Selected="@IsSelected"
          OnClick="@ClickEventHandler"
          Id="@Id">
    <ChildContent>
        <div class="Subcategory-Item-Info">
            <Typography Align="@Align.Left"
                        GutterBottom
                        Variant="@TypographyVariant.Body1"
                        Style="word-break: break-all; font-weight: bold;">
                @Subcategory.Name
            </Typography>

            <Typography Align="@Align.Left" Variant="@TypographyVariant.Body1">
                <strong>Creation date:</strong> @Subcategory.AddedDate
            </Typography>

            @if (Subcategory.ModifiedDate != null)
            {
                <Typography Align="@Align.Left" Variant="@TypographyVariant.Body1">
                    <strong>Last modification date:</strong> @Subcategory.ModifiedDate
                </Typography>
            }

            @if (!string.IsNullOrWhiteSpace(Subcategory.Description))
            {
                <Typography Align="@Align.Left"
                            Variant="@TypographyVariant.Body1"
                            Style="word-break: break-all;">
                    <strong>Description:</strong> @Subcategory.Description
                </Typography>
            }
        </div>
    </ChildContent>

    <SecondaryActionContent>
        <ListItemSecondaryAction Component="a" Style="color: inherit; text-decoration: none;" href="@($"{Constants.Page.Torrents}?category={Subcategory.CategoryId}&subcategory={Subcategory.Id}")">
            <MatRipple Class="Subcategory-Item-TorrentInfo">
                <strong style="padding-right: 5px;">@Subcategory.TorrentsCount</strong> of torrents

                <MatIcon Icon="@MatIconNames.List" Style="margin-left: 5px;" />
            </MatRipple>
        </ListItemSecondaryAction>
    </SecondaryActionContent>
</ListItem>

@code
{
    [Parameter] public SubcategoryView Subcategory { get; set; }
    [Parameter] public string Id { get; set; }
    [Parameter] public bool IsSelected { get; set; }
    [Parameter] public EventCallback<EventArgs> OnClick { get; set; }

    private async Task ClickEventHandler(EventArgs e)
    {
        if (OnClick.HasDelegate)
        {
            await OnClick.InvokeAsync(e);
        }
    }
}