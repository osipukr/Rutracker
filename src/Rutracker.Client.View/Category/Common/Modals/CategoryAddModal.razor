@inject ICategoryService CategoryService
@inject IMatToaster MatToaster

<EditForm Model="@_categoryCreate"
          OnValidSubmit="@CreateClicked"
          autocomplete="off">

    <DataAnnotationsValidator />

    <FormControl Class="Form-Cotrol">
        <MatTextField @bind-Value="@_categoryCreate.Name"
                      Label="Name"
                      Icon="@MatIconNames.Create"
                      IconTrailing="true"
                      FullWidth="true"
                      Required="true" />

        <ValidationMessage For="@(() => _categoryCreate.Name)" />
    </FormControl>

    <FormControl Class="Form-Cotrol">
        <MatTextField @bind-Value="@_categoryCreate.Description"
                      Label="Description"
                      Icon="@MatIconNames.Description"
                      IconTrailing="true"
                      FullWidth="true" />

        <ValidationMessage For="@(() => _categoryCreate.Description)" />
    </FormControl>

    <FormControl Class="Form-Cotrol Form-Actions">
        <MatButton Label="Create" Type="submit" Raised="true" />
        <MatButton OnClick="@CancelClicked" Label="Cancel" />
    </FormControl>
</EditForm>

@code
{
    [CascadingParameter] BlazoredModalInstance Modal { get; set; }

    private readonly CategoryCreateView _categoryCreate = new CategoryCreateView();

    private bool _isCanceled;

    private async Task CreateClicked()
    {
        if (_isCanceled)
        {
            return;
        }

        try
        {
            var result = await CategoryService.AddAsync(_categoryCreate);

            Modal.Close(ModalResult.Ok(result));

            MatToaster.Add($"The category '{result.Name}' was successfully created.", MatToastType.Success, "Category creating");
        }
        catch (Exception exception)
        {
            MatToaster.Add(exception.Message, MatToastType.Danger, "Category creating");
        }
    }

    private void CancelClicked()
    {
        _isCanceled = true;

        Modal.Cancel();
    }
}