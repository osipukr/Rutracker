@page "/categories"
@page "/categories/{Id:int}"

@inject ICategoryService CategoryService
@inject IMatToaster ToastService
@inject IModalService ModelService
@inject NavigationManager NavigationManager
@inject PathHelper PageHelper

<Title>@PageHelper.GetPageTitle(_category == null ? "Categories" : _category.Name)</Title>

<div class="Categories-Root">
    @if (_errorModel.IsError)
    {
        <ErrorCard>
            @_errorModel.Message
        </ErrorCard>
    }
    else
    {
        <AuthorizeView Policy="@Policies.IsAdmin">
            <Authorized>
                <CategoriesToolbar OnImportClicked="@ImportClickedEventHandler"
                                   OnExportClicked="@ExportClickedEventHandler"
                                   OnAddClicked="@AddClickedEventHandler" />
            </Authorized>
        </AuthorizeView>

        @if (_categories == null)
        {
            <ProgressCard />
        }
        else if (!_categories.Any())
        {
            <ContextMenuTrigger MenuId="@CategoryShortMenuId">
                <EmptyCard>
                    Categories list is empty
                </EmptyCard>
            </ContextMenuTrigger>
        }
        else
        {
            <MatAccordion Class="Categories-List-Root" HideToggle="false" Multi="false">
                @foreach (var category in _categories)
                {
                    var isExpanded = Id.HasValue && Id == category.Id;

                    <CategoryCard Category="@category"
                                  @key="@category"
                                  IsExpanded="@isExpanded"
                                  OnAddCategory="@AddClickedEventHandler" />
                }
            </MatAccordion>
        }
    }
</div>

<!-- Category short menu -->
<ContextMenu Id="@CategoryShortMenuId" Animation="Animation.Zoom">
    <Item OnClick="@AddClickedEventHandler">Add new category</Item>
</ContextMenu>

@code
{
    [Parameter] public int? Id { get; set; }

    private List<CategoryView> _categories;
    private CategoryView _category;

    private readonly ErrorModel _errorModel = ErrorModel.Create();

    private const string CategoryShortMenuId = "Category-Short-Action-Menu-Id";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadCategories();

            StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    protected override void OnParametersSet()
    {
        _category = null;

        if (Id.HasValue && _categories != null)
        {
            _category = _categories.FirstOrDefault(category => category.Id == Id);

            if (_category == null)
            {
                _errorModel.Handler($"Cannot find category with id '{Id}'");
            }
        }
    }

    private async Task LoadCategories()
    {
        try
        {
            _categories = (await CategoryService.ListAsync()).ToList();
        }
        catch (Exception exception)
        {
            _errorModel.HandlerException(exception);
        }
    }

    private async Task ImportClickedEventHandler(EventArgs e)
    {

    }

    private async Task ExportClickedEventHandler(EventArgs e)
    {
    }

    private async Task AddClickedEventHandler()
    {
        var reference = ModelService.Show<CategoryAddModal>("Create new category");

        var result = await reference.Result;

        if (!result.Cancelled)
        {
            if (result.Data is CategoryView category)
            {
                _categories.Add(category);

                NavigationManager.NavigateTo(PageHelper.GetCategoryPath(category.Id));
                ToastService.Add($"The category '{category.Name}' was successfully created.", MatToastType.Success, "Category creating");
            }
        }
    }

    private async Task EditClickedEventHandler(ItemClickEventArgs e)
    {
    }

    private async Task DeleteClickedEventHandler(ItemClickEventArgs e)
    {
    }

    private async Task AddSubcategoryClickedEventHandler()
    {
    }

    private async Task EditSubcategoryClickedEventHandler(SubcategoryView subcategory)
    {
    }

    private async Task DeleteSubcategoryClickedEventHandler(SubcategoryView subcategory)
    {
    }
}