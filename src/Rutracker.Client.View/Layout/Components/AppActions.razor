@inject NavigationManager NavigationManager

<ThemeProvider Theme="@Theme" />

<MarkdownStyles Theme="@Theme" />
<MarkdownPrismStyles Theme="@Theme" />

<IconButton Color="@Color.Inherit"
            OnClick="@OnThemeChange"
            aria-label="Toggle light/dark theme"
            title="Toggle light/dark theme">
    @if (IsLight)
    {
        <Brightness4Icon />
    }
    else
    {
        <Brightness7Icon />
    }
</IconButton>

<AuthorizeView Context="AuthorizeContext">
    <Authorized>
        <IconButton
            Edge="@IconButtonEdge.End"
            aria-label="account of current user"
            aria-haspopup="true"
            Href="@Constants.Page.Account"
            Color="@Color.Inherit">
            <AccountCircleIcon />
        </IconButton>
    </Authorized>

    <NotAuthorized>
        <Button Color="@Color.Inherit"
                Variant="@ButtonVariant.Outlined"
                Href="@Constants.Page.SignIn"
                style="margin-right: 10px;">
            Login
        </Button>

        <Button Color="@Color.Inherit"
                Variant="@ButtonVariant.Outlined"
                Href="@Constants.Page.SignUp">
            Register
        </Button>
    </NotAuthorized>
</AuthorizeView>

@code
{
    private Theme Theme { set; get; } = Theme.Dark;

    protected bool IsLight => Theme == Theme.Light;

    private void OnThemeChange(EventArgs e)
    {
        Theme = IsLight ? Theme.Dark : Theme.Light;
    }
}