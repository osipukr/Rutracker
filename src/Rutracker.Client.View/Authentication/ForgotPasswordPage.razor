@layout AuthenticationLayout

@page "/forgotPassword"
@using System.Timers

@inject IAccountService AccountService
@inject IMatToaster  ToastService

@implements IDisposable

<EditForm Model="@ForgotPasswordModel"
          OnValidSubmit="@ForgotPasswordAsync"
          Context="formContext"
          class="auth-form-root">

    <DataAnnotationsValidator />

    <Typography Class="auth-form-title"
                Variant="TypographyVariant.H2"
                Style="margin-bottom: 20px;">
        Forgot Password
    </Typography>

    <FormControl class="form-constrol-root">
        <MatTextField @bind-Value="@ForgotPasswordModel.UserName"
                      Label="User Name"
                      Icon="@MatIconNames.Person"
                      IconTrailing="true"
                      FullWidth="true"
                      Required="true" />

        <ValidationMessage For="@(() => ForgotPasswordModel.UserName)" />
    </FormControl>

    <Button Class="auth-form-submit-button"
            Color="@Color.Primary"
            FullWidth
            Size="@Size.Large"
            Type="@ButtonType.Submit"
            Disabled="@IsButtonDisabled"
            Variant="@ButtonVariant.Contained">
        Reset password now
        
        <strong style="text-align: right;">
            @TimeMessage
        </strong>
    </Button>

    <Typography Color="@Color.TextSecondary" Variant="@TypographyVariant.Body1">
        Have an account?

        <Link Href="@Constants.Page.SignIn">
        Sign in
        </Link>
    </Typography>

    <Typography Color="@Color.TextSecondary" Variant="@TypographyVariant.Body1">
        Don't have an account?

        <Link Href="@Constants.Page.SignUp">
        Sign up
        </Link>
    </Typography>
</EditForm>

@code
{
    private ForgotPasswordView ForgotPasswordModel = new ForgotPasswordView();

    private readonly Timer _timer = new Timer(1000);

    private DateTime _startTime;
    private readonly TimeSpan _time = TimeSpan.FromMinutes(1);

    private bool IsButtonDisabled { get; set; } = false;
    private string TimeMessage { get; set; }

    private async Task ForgotPasswordAsync()
    {
        try
        {
            await AccountService.ForgotPassword(ForgotPasswordModel);

            IsButtonDisabled = true;
            StateHasChanged();

            _timer.Elapsed += OnTimedEvent;

            _startTime = DateTime.Now;

            _timer.Start();

            ToastService.Add("To complete reset password, check the email.", MatToastType.Success, "Forgot Password");
        }
        catch (Exception exception)
        {
            ToastService.Add(exception.Message, MatToastType.Danger, "Forgot Password");
        }
    }

    private void OnTimedEvent(object source, ElapsedEventArgs e)
    {
        var remaining = _time - (e.SignalTime - _startTime);

        TimeMessage = $"({remaining.Minutes:D2}:{remaining.Seconds:D2})";

        InvokeAsync(StateHasChanged);

        if (remaining.Seconds <= 0)
        {
            InvokeAsync(() =>
            {
                _timer.Stop();
                TimeMessage = null;
                IsButtonDisabled = false;

                Dispose();

                StateHasChanged();
            });
        }
    }

    public void Dispose()
    {
        _timer?.Dispose();
    }
}