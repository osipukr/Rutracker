@layout AuthenticationLayout

@page "/resetPassword"

@inject IAccountService AccountService
@inject IMatToaster  ToastService
@inject NavigationManager NavigationManager

<EditForm Model="@ResetPasswordModel"
          OnValidSubmit="@ResetPasswordAsync"
          Context="formContext"
          class="auth-form-root">

    <DataAnnotationsValidator />

    <Typography Class="auth-form-title" Variant="TypographyVariant.H2" Style="margin-bottom: 20px;">
        Reset Password
    </Typography>

    <FormControl class="form-constrol-root">
        <MatTextField @bind-Value="@ResetPasswordModel.Password"
                      Label="Password"
                      Icon="@MatIconNames.Lock_open"
                      IconTrailing="true"
                      FullWidth="true"
                      Required="true"
                      type="password" />

        <ValidationMessage For="@(() => ResetPasswordModel.Password)" />
    </FormControl>

    <FormControl class="form-constrol-root">
        <MatTextField @bind-Value="@ResetPasswordModel.ConfirmPassword"
                      Label="Password"
                      Icon="@MatIconNames.Lock_open"
                      IconTrailing="true"
                      FullWidth="true"
                      Required="true"
                      type="password" />

        <ValidationMessage For="@(() => ResetPasswordModel.ConfirmPassword)" />
    </FormControl>

    <Button Class="auth-form-submit-button"
            Color="@Color.Primary"
            FullWidth
            Size="@Size.Large"
            Type="@ButtonType.Submit"
            Variant="@ButtonVariant.Contained">
        Reset password now
    </Button>

    <Typography Color="@Color.TextSecondary" Variant="@TypographyVariant.Body1">
        Have an account?

        <Link Href="@Constants.Page.SignIn">
        Sign in
        </Link>
    </Typography>

    <Typography Color="@Color.TextSecondary" Variant="@TypographyVariant.Body1">
        Don't have an account?

        <Link Href="@Constants.Page.SignUp">
        Sign up
        </Link>
    </Typography>
</EditForm>

@code
{
    private ResetPasswordView ResetPasswordModel = new ResetPasswordView();

    protected override void OnInitialized()
    {
        if (!NavigationManager.TryGetQueryString<string>(nameof(ResetPasswordModel.UserId), out var userId) ||
           string.IsNullOrWhiteSpace(userId) ||
           !NavigationManager.TryGetQueryString<string>(nameof(ResetPasswordModel.Token), out var token) ||
           string.IsNullOrWhiteSpace(token))
        {
            NavigationManager.NavigateTo(Constants.Page.Home);

            return;
        }

        ResetPasswordModel.UserId = userId;
        ResetPasswordModel.Token = token;
    }

    private async Task ResetPasswordAsync()
    {
        try
        {
            await AccountService.ResetPassword(ResetPasswordModel);

            ToastService.Add("Password was successfully updated.", MatToastType.Success, "Reset Password");

            NavigationManager.NavigateTo(Constants.Page.SignIn);
        }
        catch (Exception exception)
        {
            ToastService.Add(exception.Message, MatToastType.Danger, "Reset Password");
        }
    }
}