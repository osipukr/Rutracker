@inject IModalService ModalService

<div class="d-flex my-3 justify-content-end mt-3">
    <MatButton Icon="@MatIconNames.Playlist_add" Label="Add subcategory" OnClick="@CreateClicked" Raised="true" />
</div>

@if (Items == null || !Items.Any())
{
    <LoadingBackground ShowLoader="false">
        <p class="m-0">Sorry, but subcategory list is empty</p>
    </LoadingBackground>
}
else
{
    <MatTable Items="@Items" Class="mat-elevation-z5">
        <MatTableHeader>
            <th></th>
            <th>Id</th>
            <th>Torrent Count</th>
            <th>Name</th>
        </MatTableHeader>
        <MatTableRow>
            <td>
                <div style="width:100px;">
                    <MatIconButton Icon="@MatIconNames.Edit" OnClick="@(_ => UpdateClicked(context))" />
                    <MatIconButton Icon="@MatIconNames.Delete" OnClick="@(_ => DeleteClicked(context))" />
                </div>
            </td>
            <td>@context.Id</td>
            <td>@context.TorrentsCount</td>
            <td>@context.Name</td>
        </MatTableRow>
    </MatTable>
}

@code
{
    [Parameter] IEnumerable<SubcategoryViewModel> Items { get; set; }
    [Parameter] private EventCallback<SubcategoryCreateViewModel> OnCreate { get; set; }
    [Parameter] private Func<SubcategoryViewModel, SubcategoryUpdateViewModel, Task> OnUpdate { get; set; }
    [Parameter] private EventCallback<SubcategoryViewModel> OnDelete { get; set; }

    private SubcategoryViewModel Subcategory { get; set; }

    private void CreateClicked()
    {
        ModalService.OnClose += SubcategoryAddModalClosed;
        ModalService.Show("Create subcategory", typeof(SubcategoryAddModal));
    }

    private void UpdateClicked(SubcategoryViewModel model)
    {
        var parameters = new ModalParameters();

        parameters.Add(nameof(SubcategoryUpdateViewModel), new SubcategoryUpdateViewModel
        {
            Name = model.Name
        });

        Subcategory = model;

        ModalService.OnClose += SubcategoryUpdateModalClosed;
        ModalService.Show("Update subcategory", typeof(SubcategoryUpdateModal), parameters);
    }

    private void DeleteClicked(SubcategoryViewModel model)
    {
        var parameters = new ModalParameters();

        parameters.Add(nameof(SubcategoryViewModel), model);

        ModalService.OnClose += SubcategoryDeleteModalClosed;
        ModalService.Show("Delete subcategory", typeof(SubcategoryDeleteModal), parameters);
    }

    private async void SubcategoryAddModalClosed(ModalResult result)
    {
        if (!result.Cancelled && result.Data is SubcategoryCreateViewModel model)
        {
            await OnCreate.InvokeAsync(model);
        }

        ModalService.OnClose -= SubcategoryAddModalClosed;
    }

    private async void SubcategoryUpdateModalClosed(ModalResult result)
    {
        if (!result.Cancelled && result.Data is SubcategoryUpdateViewModel model)
        {
            await OnUpdate.Invoke(Subcategory, model);
        }

        ModalService.OnClose -= SubcategoryUpdateModalClosed;
    }

    private async void SubcategoryDeleteModalClosed(ModalResult result)
    {
        if (!result.Cancelled && result.Data is SubcategoryViewModel model)
        {
            await OnDelete.InvokeAsync(model);
        }

        ModalService.OnClose -= SubcategoryDeleteModalClosed;
    }
}