@inject IModalService ModalService

@if (Items == null)
{
    <LoadingBackground ShowLoader="false">
        <p class="m-0">Sorry, but the list of subcategory is not loaded</p>
    </LoadingBackground>
}
else
{
    <MatTable Items="@Items" AllowSelection="true" class="mat-elevation-z5">
        <MatTableHeader>
            <th class="p-2 text-center">
                <MatIconButton @onclick="@CreateClicked" Icon="@MatIconNames.Add" title="Add new subcategory" />
            </th>
            <th>Id</th>
            <th>Torrent Count</th>
            <th>Name</th>
        </MatTableHeader>
        <MatTableRow Context="subcategory">
            <td>
                <div style="width:100px;">
                    <MatIconButton @onclick="@(_ => UpdateClicked(subcategory))" Icon="@MatIconNames.Edit" />
                    <MatIconButton @onclick="@(_ => DeleteClicked(subcategory))" Icon="@MatIconNames.Delete" />
                </div>
            </td>
            <td>@subcategory.Id</td>
            <td>@subcategory.TorrentsCount</td>
            <td>@subcategory.Name</td>
        </MatTableRow>
    </MatTable>
}

@code
{
    [Parameter] public IEnumerable<SubcategoryViewModel> Items { get; set; }
    [Parameter] public EventCallback<SubcategoryCreateViewModel> OnCreate { get; set; }
    [Parameter] public Func<SubcategoryViewModel, SubcategoryUpdateViewModel, Task> OnUpdate { get; set; }
    [Parameter] public EventCallback<SubcategoryViewModel> OnDelete { get; set; }

    private SubcategoryViewModel Subcategory { get; set; }

    private void CreateClicked()
    {
        ModalService.OnClose += SubcategoryAddModalClosed;
        ModalService.Show("Create subcategory", typeof(SubcategoryAddModal));
    }

    private void UpdateClicked(SubcategoryViewModel model)
    {
        var parameters = new ModalParameters();

        parameters.Add(nameof(SubcategoryUpdateViewModel), new SubcategoryUpdateViewModel
        {
            Name = model.Name
        });

        Subcategory = model;

        ModalService.OnClose += SubcategoryUpdateModalClosed;
        ModalService.Show("Update subcategory", typeof(SubcategoryUpdateModal), parameters);
    }

    private void DeleteClicked(SubcategoryViewModel model)
    {
        var parameters = new ModalParameters();

        parameters.Add(nameof(SubcategoryViewModel), model);

        ModalService.OnClose += SubcategoryDeleteModalClosed;
        ModalService.Show("Delete subcategory", typeof(SubcategoryDeleteModal), parameters);
    }

    private async void SubcategoryAddModalClosed(ModalResult result)
    {
        if (!result.Cancelled && result.Data is SubcategoryCreateViewModel model)
        {
            await OnCreate.InvokeAsync(model);
        }

        ModalService.OnClose -= SubcategoryAddModalClosed;
    }

    private async void SubcategoryUpdateModalClosed(ModalResult result)
    {
        if (!result.Cancelled && result.Data is SubcategoryUpdateViewModel model)
        {
            await OnUpdate.Invoke(Subcategory, model);
        }

        Subcategory = null;
        ModalService.OnClose -= SubcategoryUpdateModalClosed;
    }

    private async void SubcategoryDeleteModalClosed(ModalResult result)
    {
        if (!result.Cancelled && result.Data is SubcategoryViewModel model)
        {
            await OnDelete.InvokeAsync(model);
        }

        ModalService.OnClose -= SubcategoryDeleteModalClosed;
    }
}