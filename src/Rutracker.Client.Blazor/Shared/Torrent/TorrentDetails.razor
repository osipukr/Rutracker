<MatTabGroup>
    <MatTab id="info">
        <LabelContent>
            <MatIcon Icon="@MatIconNames.Description" />
            <p class="m-0">Description</p>
        </LabelContent>

        <ChildContent>
            <MatList TwoLine="true">
                <MatListItem>
                    <MatListItemText>
                        <MatListItemPrimaryText>Id</MatListItemPrimaryText>
                        <MatListItemSecondaryText>@Torrent.Id</MatListItemSecondaryText>
                    </MatListItemText>
                </MatListItem>

                <MatListItem>
                    <MatListItemText>
                        <MatListItemPrimaryText>Title</MatListItemPrimaryText>
                        <MatListItemSecondaryText>@Torrent.Name</MatListItemSecondaryText>
                    </MatListItemText>
                </MatListItem>

                <MatListItem>
                    <MatListItemText>
                        <MatListItemPrimaryText>Size (bytes)</MatListItemPrimaryText>
                        <MatListItemSecondaryText>@Torrent.Size</MatListItemSecondaryText>
                    </MatListItemText>
                </MatListItem>

                <MatListItem>
                    <MatListItemText>
                        <MatListItemPrimaryText>Date</MatListItemPrimaryText>
                        <MatListItemSecondaryText>@Torrent.CreatedAt.ToLongDateString()</MatListItemSecondaryText>
                    </MatListItemText>
                </MatListItem>

                <MatListItem>
                    <MatListItemText>
                        <MatListItemPrimaryText>Hash</MatListItemPrimaryText>
                        <MatListItemSecondaryText>@Torrent.Hash</MatListItemSecondaryText>
                    </MatListItemText>
                </MatListItem>
            </MatList>
        </ChildContent>
    </MatTab>

    @if (Torrent.Files != null && Torrent.Files.Length != 0)
    {
        <MatTab id="files">
            <LabelContent>
                <MatIcon Icon="@MatIconNames.Folder_open" />
                <p class="m-0">Files</p>
            </LabelContent>

            <ChildContent>
                <MatTable Items="@GetFiles()"
                          DebounceMilliseconds="150"
                          FilterByColumnName="@nameof(FileViewModel.Name)"
                          SearchTermFieldLabel="Name"
                          SearchTermFieldPlaceHolder="Input the name"
                          class="mt-2 mat-elevation-z10" >
                    <MatTableHeader>
                        <th>Size</th>
                        <th>Name</th>
                    </MatTableHeader>
                    <MatTableRow Context="torrent">
                        <td>@torrent.Size</td>
                        <td>@torrent.Name</td>
                    </MatTableRow>
                </MatTable>
            </ChildContent>
        </MatTab>
    }

    @if (Torrent.Content != null)
    {
        <MatTab id="content">
            <LabelContent>
                <MatIcon Icon="@MatIconNames.Comment" />
                <p class="m-0">Content</p>
            </LabelContent>

            <ChildContent>@((MarkupString)Torrent.Content)</ChildContent>
        </MatTab>
    }

    <MatTab id="comments">
        <LabelContent>
            <MatIcon Icon="@MatIconNames.Comment" />
            <p class="m-0">Comments</p>
        </LabelContent>

        <ChildContent>
            <CommentList Items="@Comments" OnCreate="@CommentCreateAsync" OnLike="@CommentLikeAsync" />
        </ChildContent>
    </MatTab>
</MatTabGroup>

@code
{
    [Parameter] public TorrentDetailsViewModel Torrent { get; set; }
    [Parameter] public IEnumerable<CommentViewModel> Comments { get; set; }
    [Parameter] public EventCallback<CommentCreateViewModel> OnCommentCreate { get; set; }
    [Parameter] public EventCallback<int> OnCommentLike { get; set; }

    private async Task CommentCreateAsync(CommentCreateViewModel model) => await OnCommentCreate.InvokeAsync(model);
    private async Task CommentLikeAsync(int id) => await OnCommentLike.InvokeAsync(id);

    private IEnumerable<FileViewModel> GetFiles() => Torrent.Files.AsEnumerable();
}