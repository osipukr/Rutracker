@inject AppState AppState
@inject ICategoryService CategoryService
@inject IMatToaster MatToaster

<div class="mat-layout-grid px-0">
    <div class="mat-layout-grid-inner">
        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-12">
            <EditForm Model="@Model" OnValidSubmit="@OnValidSubmitClicked">
                <DataAnnotationsValidator />

                <MatTextField @bind-Value="@Model.Search"
                              Type="search"
                              FullWidth="true"
                              IconTrailing="true"
                              Icon="@MatIconNames.Search"
                              InputClass="pr-5"
                              Label="Search" />

                <ValidationMessage For="@(() => Model.Search)" />

                <div class="row px-0 pt-5 pb-3">
                    <div class="col">
                        <MatSelect @bind-Value="@CategoryId"
                                    Label="Category"
                                    Class="w-100"
                                    Outlined="true"
                                    Disabled="@(Categories == null)">
                            <MatOption Value="">No select</MatOption>

                            @if (Categories != null)
                            {
                                @foreach (var category in Categories)
                                {
                                    <MatOption Value="@category.Id.ToString()">@category.Name</MatOption>
                                }
                            }
                        </MatSelect>
                    </div>

                    <div class="col">
                        <MatSelect @bind-Value="@SubcategoryId"
                                    Label="Subcategory"
                                    Class="w-100"
                                    Outlined="true"
                                    Disabled="@(Subcategories == null)">
                            <MatOption Value="">No select</MatOption>

                            @if (Subcategories != null)
                            {
                                @foreach (var subcategory in Subcategories)
                                {
                                    <MatOption Value="@subcategory.Id.ToString()">
                                        @subcategory.Name (@subcategory.TorrentsCount)
                                    </MatOption>
                                }
                            }
                        </MatSelect>
                    </div>
                </div>

                <div class="d-flex justify-content-end">
                    <div class="d-flex justify-content-between filter-group-btn">
                        <MatButton OnClick="@ResetButtonClicked"
                                   Type="reset"
                                   Disabled="@AppState.SearchInProgress"
                                   Outlined="true"
                                   Class="filter-btn mat-elevation-z5"
                                   Label="All" />

                        <MatButton Type="submit"
                                   Disabled="@AppState.SearchInProgress"
                                   Raised="true"
                                   TrailingIcon="@MatIconNames.Search"
                                   Class="filter-btn mat-elevation-z5"
                                   Label="Apply" />
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code
{
    [Parameter] private FilterViewModel Model { get; set; }
    [Parameter] private EventCallback FilterChanged { get; set; }

    private IEnumerable<CategoryViewModel> Categories { get; set; }
    private IEnumerable<SubcategoryViewModel> Subcategories { get; set; }

    private string CategoryId
    {
        get => Model.CategoryId.ToString();
        set
        {
            if (int.TryParse(value, out var id))
            {
                Model.CategoryId = id;
                Subcategories = Categories?.FirstOrDefault(x => x.Id == id)?.Subcategories;
            }
            else
            {
                Model.CategoryId = null;
                SubcategoryId = null;
                Subcategories = null;
            }

            StateHasChanged();
        }
    }

    private string SubcategoryId
    {
        get => Model.SubcategoryId.ToString();
        set => Model.SubcategoryId = int.TryParse(value, out var id) ? (int?)id : null;
    }

    protected override async Task OnInitAsync() => await LoadCategoriesAsync();

    private async Task LoadCategoriesAsync()
    {
        try
        {
            Categories = await CategoryService.ListAsync();
        }
        catch (Exception ex)
        {
            MatToaster.Add(ex.Message, MatToastType.Warning, "Load categories");
        }
    }

    private void ResetFiltration()
    {
        Model.Search = null;
        CategoryId = null;
        SubcategoryId = null;
    }

    private void ResetButtonClicked()
    {
        ResetFiltration();
        OnValidSubmitClicked();
    }

    private void OnValidSubmitClicked() => FilterChanged.InvokeAsync(EventArgs.Empty);
}