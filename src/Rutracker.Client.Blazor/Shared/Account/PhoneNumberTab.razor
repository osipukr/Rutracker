@inject IUserService UserService
@inject IMatToaster MatToaster

<MatTab>
    <LabelContent>Phone</LabelContent>
    <ChildContent>
        <EditForm Model="@ChangePhoneNumberModel" OnValidSubmit="@ChangePhoneNumberClicked">
            <div class="form-group">
                <DataAnnotationsValidator />
                <ValidationSummary />
            </div>

            <div class="form-group">
                <MatTextField @bind-Value="@ChangePhoneNumberModel.PhoneNumber"
                              Label="Phone number"
                              Icon="@MatIconNames.Phone"
                              IconTrailing="true"
                              FullWidth="true"
                              Required="true" />
            </div>

            <div class="form-group mt-4 d-flex justify-content-end">
                <MatButton OnClick="@ConfirmPhoneNumberClicked"
                           Disabled="@UserModel.PhoneNumberConfirmed"
                           Raised="true"
                           Label="Confirm phone" />
                <MatButton OnClick="@DeletePhoneNumberClicked" Raised="true" Label="Delete phone" Class="ml-2" />
                <MatButton Type="submit" Raised="true" Label="Change phone" Class="ml-2" />
            </div>
        </EditForm>
    </ChildContent>
</MatTab>

@code
{
    [Parameter] private UserDetailsViewModel UserModel { get; set; }
    [Parameter] private EventCallback OnChange { get; set; }

    private ChangePhoneNumberViewModel ChangePhoneNumberModel { get; set; } = new ChangePhoneNumberViewModel();

    protected override void OnParametersSet() => ChangePhoneNumberModel.PhoneNumber = UserModel.PhoneNumber;

    private async Task ChangePhoneNumberClicked()
    {
        if (UserModel.PhoneNumber == ChangePhoneNumberModel.PhoneNumber)
        {
            return;
        }

        try
        {
            await UserService.ChangePhoneNumber(ChangePhoneNumberModel);

            MatToaster.Add("Phone number changed successfully.", MatToastType.Success, "Phone number change");

            await OnChange.InvokeAsync(EventArgs.Empty);
        }
        catch (Exception ex)
        {
            MatToaster.Add(ex.Message, MatToastType.Warning, "Phone number change");
        }
    }

    private async Task DeletePhoneNumberClicked()
    {
        if (UserModel.PhoneNumber == null)
        {
            return;
        }

        try
        {
            await UserService.DeletePhoneNumber();

            MatToaster.Add("Phone number is deleted successfully.", MatToastType.Success, "Phone number delete");

            await OnChange.InvokeAsync(EventArgs.Empty);
        }
        catch (Exception ex)
        {
            MatToaster.Add(ex.Message, MatToastType.Warning, "Phone number delete");
        }
    }

    private async Task ConfirmPhoneNumberClicked()
    {
        await Task.CompletedTask;
    }
}