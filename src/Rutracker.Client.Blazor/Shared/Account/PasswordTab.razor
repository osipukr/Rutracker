@inject IUserService UserService
@inject IMatToaster MatToaster

<MatTab>
    <LabelContent>Changed Password</LabelContent>
    <ChildContent>
        <EditForm Model="@ChangePasswordModel" OnValidSubmit="@ChangePasswordClicked">
            <div class="form-group">
                <DataAnnotationsValidator />
                <ValidationSummary />
            </div>

            <div class="form-group">
                <MatTextField @bind-Value="@ChangePasswordModel.OldPassword"
                              Label="Old password"
                              Icon="@MatIconNames.Lock_open"
                              IconTrailing="true"
                              FullWidth="true"
                              Required="true"
                              type="password" />
            </div>

            <div class="form-group">
                <MatTextField @bind-Value="@ChangePasswordModel.NewPassword"
                              Label="New password"
                              Icon="@MatIconNames.Lock_open"
                              IconTrailing="true"
                              FullWidth="true"
                              Required="true"
                              type="password" />
            </div>

            <div class="form-group">
                <MatTextField @bind-Value="@ChangePasswordModel.ConfirmNewPassword"
                              Label="Confirm new password"
                              Icon="@MatIconNames.Lock_open"
                              IconTrailing="true"
                              FullWidth="true"
                              Required="true"
                              type="password" />
            </div>

            <div class="form-group mt-4 d-flex justify-content-end">
                <MatButton Label="Change password" Raised="true" type="submit" />
            </div>
        </EditForm>
    </ChildContent>
</MatTab>

@code
{
    [Parameter] public EventCallback OnChange { get; set; }

    private ChangePasswordViewModel ChangePasswordModel { get; set; } = new ChangePasswordViewModel();

    private async Task ChangePasswordClicked()
    {
        try
        {
            await UserService.ChangePassword(ChangePasswordModel);

            MatToaster.Add("Password changed successfully.", MatToastType.Success);

            ChangePasswordModel = new ChangePasswordViewModel();

            await OnChange.InvokeAsync(EventArgs.Empty);
        }
        catch (Exception ex)
        {
            MatToaster.Add(ex.Message, MatToastType.Warning);
        }
    }
}