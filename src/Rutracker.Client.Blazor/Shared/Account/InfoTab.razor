@inject IUserService UserService
@inject IMatToaster MatToaster
@inject IModalService ModalService

<MatTab>
    <LabelContent>Info</LabelContent>
    <ChildContent>
        <div class="form-group">
            <MatTextField Value="@UserModel.UserName"
                          Label="User Name"
                          Icon="@MatIconNames.Person"
                          IconTrailing="true"
                          FullWidth="true"
                          ReadOnly="true" />
        </div>

        <div class="form-group">
            <MatTextField Value="@UserModel.Email"
                          Label="User Name"
                          Icon="@MatIconNames.Mail_outline"
                          IconTrailing="true"
                          FullWidth="true"
                          ReadOnly="true" />
        </div>

        <div class="form-group">
            <MatTextField Value="@UserModel.PhoneNumber"
                          Label="Phone number"
                          Icon="@MatIconNames.Phone"
                          IconTrailing="true"
                          FullWidth="true"
                          ReadOnly="true" />
        </div>

        <div class="form-group">
            <MatTextField Value="@UserModel.FirstName" Label="User Name" FullWidth="true" ReadOnly="true" />
        </div>

        <div class="form-group">
            <MatTextField Value="@UserModel.LastName" Label="User Name" FullWidth="true" ReadOnly="true" />
        </div>

        <div class="form-group mt-4 d-flex justify-content-end">
            <MatButton OnClick="@EditUserClicked" Raised="true" Label="Edit profile" />
        </div>
    </ChildContent>
</MatTab>

@code
{
    [Parameter] private UserDetailsViewModel UserModel { get; set; }
    [Parameter] private EventCallback OnChange { get; set; }

    private void EditUserClicked()
    {
        var parameters = new ModalParameters();

        parameters.Add(nameof(EditUserViewModel), new EditUserViewModel
        {
            FirstName = UserModel.FirstName,
            LastName = UserModel.LastName,
            ImageUrl = UserModel.ImageUrl
        });

        ModalService.OnClose += ModalClosed;

        ModalService.Show("Edit profile", typeof(EditProfileModal), parameters);
    }

    private async void ModalClosed(ModalResult result)
    {
        if (!result.Cancelled && result.Data is EditUserViewModel model)
        {
            await UpdateUserClicked(model);

            MatToaster.Add("User information changed successfully.", MatToastType.Success, "User update");

            await OnChange.InvokeAsync(EventArgs.Empty);
        }

        ModalService.OnClose -= ModalClosed;
    }

    private async Task UpdateUserClicked(EditUserViewModel model)
    {
        try
        {
            await UserService.UpdateUser(model);
        }
        catch (Exception ex)
        {
            MatToaster.Add(ex.Message, MatToastType.Warning, "User update");
        }
    }
}