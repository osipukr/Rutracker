@inject IModalService ModalService

<MatTab>
    <LabelContent>Info</LabelContent>
    <ChildContent>
        <div class="form-group">
            <MatTextField Value="@UserModel.UserName"
                          Label="User Name"
                          Icon="@MatIconNames.Person"
                          IconTrailing="true"
                          FullWidth="true"
                          ReadOnly="true" />
        </div>

        <div class="form-group">
            <MatTextField Value="@UserModel.Email"
                          Label="User Name"
                          Icon="@MatIconNames.Mail_outline"
                          IconTrailing="true"
                          FullWidth="true"
                          ReadOnly="true" />
        </div>

        <div class="form-group">
            <MatTextField Value="@UserModel.PhoneNumber"
                          Label="Phone number"
                          Icon="@MatIconNames.Phone"
                          IconTrailing="true"
                          FullWidth="true"
                          ReadOnly="true" />
        </div>

        <div class="form-group">
            <MatTextField Value="@UserModel.FirstName" Label="User Name" FullWidth="true" ReadOnly="true" />
        </div>

        <div class="form-group">
            <MatTextField Value="@UserModel.LastName" Label="User Name" FullWidth="true" ReadOnly="true" />
        </div>

        <div class="form-group mt-4 d-flex justify-content-end">
            <MatButton OnClick="@ChangeUserModalOpenClicked" Raised="true" Label="Edit profile" />
        </div>
    </ChildContent>
</MatTab>

@code
{
    [Parameter] private UserDetailsViewModel UserModel { get; set; }
    [Parameter] private EventCallback OnChange { get; set; }

    private void ChangeUserModalOpenClicked()
    {
        var parameters = new ModalParameters();

        parameters.Add(nameof(ChangeUserViewModel), new ChangeUserViewModel
        {
            FirstName = UserModel.FirstName,
            LastName = UserModel.LastName
        });

        ModalService.OnClose += ModalClosed;
        ModalService.Show("Change user info", typeof(ChangeUserModal), parameters);
    }

    private async void ModalClosed(ModalResult result)
    {
        if (!result.Cancelled && result.Data is bool isSuccess && isSuccess)
        {
            await OnChange.InvokeAsync(EventArgs.Empty);
        }

        ModalService.OnClose -= ModalClosed;
    }
}