@using global::Blazor.FileReader

@inject AppState AppState
@inject IMatToaster MatToaster
@inject IModalService ModalService
@inject IFileReaderService FileReaderService

<EditForm Model="@EditModel" OnValidSubmit="@UpdateClicked">
    <fieldset>
        <div class="form-group">
            <DataAnnotationsValidator />
            <ValidationSummary />
        </div>

        <div class="form-group">
            <MatTextField @bind-Value="EditModel.Email"
                          Label="Email"
                          Icon="@MatIconNames.Mail_outline"
                          IconTrailing="true"
                          FullWidth="true" />
        </div>

        <div class="form-group">
            <MatTextField @bind-Value="EditModel.FirstName"
                          Label="Fist Name"
                          Icon="@MatIconNames.Person"
                          IconTrailing="true"
                          FullWidth="true" />
        </div>

        <div class="form-group">
            <MatTextField @bind-Value="EditModel.LastName"
                          Label="Last Name"
                          Icon="@MatIconNames.Person"
                          IconTrailing="true"
                          FullWidth="true" />
        </div>

        <div class="form-group">
            <MatTextField @bind-Value="EditModel.ImageUrl"
                          Label="Image Url"
                          FullWidth="true" />
        </div>

        <div class="form-group">
            <input type="file" @ref="_inputTypeFileElement" />
        </div>

        <div class="form-group mt-4 d-flex justify-content-end">
            <MatButton OnClick="@CancelClicked" Raised="true" Label="Cancel" Class="mx-2" />
            <MatButton Type="submit" Raised="true" Label="Update" Class="mx-2" />
        </div>
    </fieldset>
</EditForm>

@code
{
    [CascadingParameter] private ModalParameters Parameters { get; set; }

    private EditUserViewModel EditModel { get; set; }
    private ElementRef _inputTypeFileElement;

    protected override void OnInit()
    {
        EditModel = Parameters.Get<EditUserViewModel>(nameof(EditUserViewModel));
    }

    private async Task ReadFileAsync()
    {
        var file = (await FileReaderService.CreateReference(_inputTypeFileElement).EnumerateFilesAsync()).FirstOrDefault();

        if (file == null)
        {
            return;
        }

        using var stream = await file.OpenReadAsync();

        if (stream.Length > Constants.File.MaxImageSize)
        {
            throw new Exception("File size too large.");
        }

        EditModel.ImageBytes = new byte[stream.Length];

        var buffer = new byte[4 * 1024];
        var length = 0;
        int count;

        while ((count = await stream.ReadAsync(buffer, 0, buffer.Length)) > 0)
        {
            Array.Copy(buffer, 0, EditModel.ImageBytes, length, count);

            length += count;
        }
    }

    private async Task UpdateClicked()
    {
        try
        {
            await ReadFileAsync();
            await AppState.UpdateUser(EditModel);

            ModalService.Close(ModalResult.Ok(true));
        }
        catch (Exception ex)
        {
            MatToaster.Add(ex.Message, MatToastType.Warning, "Error update user");
        }
    }

    private void CancelClicked() => ModalService.Cancel();
}