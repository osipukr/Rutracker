@inject AppState AppState
@inject ViewSettings ViewSettings
@inject IMatToaster MatToaster

<div class="mat-layout-grid px-0">
    <div class="mat-layout-grid-inner">
        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-12">
            <EditForm Model="@Model" OnValidSubmit="@OnValidSubmitClicked">
                <DataAnnotationsValidator />

                <MatTextField @bind-Value="@Model.Search"
                              Type="search"
                              FullWidth="true"
                              IconTrailing="true"
                              Icon="@MatIconNames.Search"
                              InputClass="pr-5"
                              Label="Search" />

                <ValidationMessage For="@(() => Model.Search)" />

                <MatAccordion Multi="true" Class="my-4">
                    <MatExpansionPanel>
                        <MatExpansionPanelSummary Class="no-select">
                            <MatExpansionPanelHeader>Size range</MatExpansionPanelHeader>
                        </MatExpansionPanelSummary>

                        <MatExpansionPanelDetails>
                            <div class="d-flex flex-wrap">
                                <div class="flex-fill mx-2">
                                    <MatNumeric Label="From" @bind-Value="@Model.SizeFrom" />
                                    <ValidationMessage For="@(() => Model.SizeFrom)" />
                                </div>

                                <div class="flex-fill mx-2">
                                    <MatNumeric Label="To" @bind-Value="@Model.SizeTo" />
                                    <ValidationMessage For="@(() => Model.SizeTo)" />
                                </div>
                            </div>
                        </MatExpansionPanelDetails>
                    </MatExpansionPanel>

                    <MatExpansionPanel>
                        <MatExpansionPanelSummary Class="no-select">
                            <MatExpansionPanelHeader>Forum titles category</MatExpansionPanelHeader>
                        </MatExpansionPanelSummary>

                        <MatExpansionPanelDetails>
                            @if (TitleFacet?.Items != null)
                            {
                                foreach (var facet in TitleFacet.Items)
                                {
                                    <MatCheckbox @bind-Checked="@facet.IsSelected">
                                        @facet.Value

                                        <span class="badge badge-pill text-white" style="background-color: var(--mdc-theme-primary);">
                                            @facet.Count
                                        </span>
                                    </MatCheckbox>
                                }
                            }
                        </MatExpansionPanelDetails>
                    </MatExpansionPanel>
                </MatAccordion>

                <div class="d-flex justify-content-end">
                    <div class="d-flex justify-content-between filter-group-btn">
                        <MatButton OnClick="@ResetButtonClicked"
                                   Type="reset"
                                   Disabled="@AppState.SearchInProgress"
                                   Outlined="true"
                                   Class="filter-btn mat-elevation-z5"
                                   Label="All" />

                        <MatButton Type="submit"
                                   Disabled="@AppState.SearchInProgress"
                                   Raised="true"
                                   TrailingIcon="@MatIconNames.Search"
                                   Class="filter-btn mat-elevation-z5"
                                   Label="Apply" />
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code
{
    [Parameter] private FilterViewModel Model { get; set; }
    [Parameter] private EventCallback FilterChanged { get; set; }

    private int TitleCount => ViewSettings.ForumTitlesCount;
    private FacetResult<string> TitleFacet { get; set; }

    protected override async Task OnInitAsync() => await LoadTitleFacetsAsync();

    private async Task LoadTitleFacetsAsync()
    {
        try
        {
            TitleFacet = await AppState.TitleFacet(TitleCount);
        }
        catch (Exception ex)
        {
            MatToaster.Add(ex.Message, MatToastType.Warning, "Failed load titles");
        }
    }

    private void ResetFiltration()
    {
        Model.Search = null;
        Model.SizeFrom = null;
        Model.SizeTo = null;
        Model.SelectedForumIds = null;

        if (TitleFacet?.Items != null)
        {
            foreach (var facet in TitleFacet.Items)
            {
                facet.IsSelected = false;
            }
        }
    }

    private void ResetButtonClicked()
    {
        ResetFiltration();
        OnValidSubmitClicked();
    }

    private void OnValidSubmitClicked()
    {
        Model.SelectedForumIds = TitleFacet?.Items?.Where(x => x.IsSelected).Select(x => x.Id);

        FilterChanged.InvokeAsync(EventArgs.Empty);
    }
}