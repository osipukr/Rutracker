@inject IModalService ModalService

<div class="profile-header__image position-relative">
    @if (PageHelpers.IsValidImageUrl(Url))
    {
        <MatIconButton OnClick="@DeleteModalOpened"
                       Icon="@MatIconNames.Close"
                       class="delete position-absolute"
                       style="top: -13px; right: -15px;"
                       title="Remove image" />
    }

    <MatRipple @onclick="@ChangeModalOpened"
               Color="@MatRippleColor.Primary"
               class="w-100 h-100 no-select rounded-circle mat-elevation-z5"
               style="cursor: pointer;"
               title="Change image">
        @if (PageHelpers.IsValidImageUrl(Url))
        {
            <img class="w-100 h-100" src="@Url" alt="User image" />
        }
        else
        {
            <img class="w-100 h-100" src="@Constants.Path.DefaultProfileImage" alt="Default user image" />
        }
    </MatRipple>
</div>

@code
{
    [Parameter] public string Url { get; set; }
    [Parameter] public EventCallback<ChangeImageViewModel> OnChange { get; set; }

    private void ChangeModalOpened()
    {
        ModalService.OnClose += ChangeModalClosed;
        ModalService.Show("Change user image", typeof(UserImageChangeModal));
    }

    private void DeleteModalOpened()
    {
        ModalService.OnClose += ChangeModalClosed;
        ModalService.Show("Delete user image", typeof(UserImageDeleteModal));
    }

    private async void ChangeModalClosed(ModalResult result)
    {
        if (!result.Cancelled && result.Data is ChangeImageViewModel model)
        {
            await OnChange.InvokeAsync(model);
        }

        ModalService.OnClose -= ChangeModalClosed;
    }
}