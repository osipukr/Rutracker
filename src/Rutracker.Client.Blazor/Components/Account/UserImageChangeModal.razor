@using global::Blazor.FileReader

@inject IModalService ModalService
@inject IFileReaderService FileReaderService

<EditForm Model="@ChangeImageModel" OnValidSubmit="@ChangeClicked">
    <div class="form-group">
        <DataAnnotationsValidator />
        <ValidationSummary />
    </div>

    <div class="form-group">
        <MatTextField @bind-Value="@ChangeImageModel.ImageUrl" Label="Image Url" FullWidth="true" />
    </div>

    <div class="form-group text-center">or</div>

    <div class="form-group">
        Select image from computer: <input type="file" accept="image/*" @ref="_inputTypeFileElement" />
    </div>

    <div class="form-group mt-4 d-flex justify-content-end">
        <MatButton OnClick="@CancelClicked" Label="Cancel" Raised="true" class="mr-2" />
        <MatButton OnClick="@DeleteClicked" Label="Delete" Raised="true" class="ml-2" />
        <MatButton Label="Update" Raised="true" type="submit" class="ml-2" />
    </div>
</EditForm>

@code
{
    private ChangeImageViewModel ChangeImageModel { get; set; } = new ChangeImageViewModel();
    private ElementReference _inputTypeFileElement;

    private async Task ReadFileAsync()
    {
        var file = (await FileReaderService.CreateReference(_inputTypeFileElement).EnumerateFilesAsync()).FirstOrDefault();

        if (file == null)
        {
            return;
        }

        var type = (await file.ReadFileInfoAsync()).Type;

        using var stream = await file.OpenReadAsync();

        if (stream.Length > Constants.File.MaxImageSize)
        {
            throw new Exception("File size too large.");
        }

        ChangeImageModel.ImageBytes = new byte[stream.Length];
        ChangeImageModel.FileType = type;

        var buffer = new byte[4 * 1024];
        var length = 0;
        int count;

        while ((count = await stream.ReadAsync(buffer, 0, buffer.Length)) > 0)
        {
            Array.Copy(buffer, 0, ChangeImageModel.ImageBytes, length, count);

            length += count;
        }
    }

    private async Task ChangeClicked()
    {
        await ReadFileAsync();

        if(ChangeImageModel.ImageUrl == null && ChangeImageModel.ImageBytes == null) return;

        ModalService.Close(ModalResult.Ok(ChangeImageModel));
    }

    private void DeleteClicked()
    {
        ChangeImageModel.FileType = null;
        ChangeImageModel.ImageBytes = null;
        ChangeImageModel.ImageUrl = null;
        ChangeImageModel.IsDelete = true;

        ModalService.Close(ModalResult.Ok(ChangeImageModel));
    }

    private void CancelClicked() => ModalService.Cancel();
}