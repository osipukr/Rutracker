<MatTab>
    <LabelContent>Email</LabelContent>
    <ChildContent>
        <EditForm Model="@ChangeEmailModel" OnValidSubmit="@ChangeEmailClicked">
            <div class="form-group">
                <DataAnnotationsValidator />
                <ValidationSummary />
            </div>

            <div class="form-group">
                <MatTextField @bind-Value="@ChangeEmailModel.Email"
                              Label="Email"
                              Icon="@MatIconNames.Mail_outline"
                              IconTrailing="true"
                              FullWidth="true" />
            </div>

            <div class="form-group mt-4 d-flex justify-content-end">
                <MatButton Label="Change email" Raised="true" type="submit" />
            </div>
        </EditForm>
    </ChildContent>
</MatTab>

@code
{
    [Parameter] public UserDetailsViewModel UserModel { get; set; }
    [Parameter] public EventCallback<ChangeEmailViewModel> OnChange { get; set; }

    private ChangeEmailViewModel ChangeEmailModel { get; set; }

    protected override void OnParametersSet() => ChangeEmailModel = new ChangeEmailViewModel
    {
        Email = UserModel.Email
    };

    private async Task ChangeEmailClicked()
    {
        if (UserModel.Email == ChangeEmailModel.Email)
        {
            return;
        }

        await OnChange.InvokeAsync(ChangeEmailModel);
    }
}