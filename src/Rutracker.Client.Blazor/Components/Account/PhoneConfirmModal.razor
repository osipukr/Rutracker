@inject IModalService ModalService

<EditForm Model="@ConfirmPhoneNumberModel" OnValidSubmit="@ConfirmClicked">
    <DataAnnotationsValidator />

    <div class="form-group">
        <MatTextField @bind-Value="@ConfirmPhoneNumberModel.Token" Label="Code" FullWidth="true" />
        <ValidationMessage For="@(() => ConfirmPhoneNumberModel.Token)" />
    </div>

    <div class="d-flex flex-row-reverse mt-4">
        <MatButton Label="Confrim" type="submit" />
        <MatButton OnClick="@CancelClicked" Label="Cancel" />
    </div>
</EditForm>

@code
{
    [CascadingParameter] public ModalParameters Parameters { get; set; }

    private ConfirmChangePhoneNumberViewModel ConfirmPhoneNumberModel { get; set; }

    protected override void OnInitialized()
    {
        ConfirmPhoneNumberModel = Parameters.Get<ConfirmChangePhoneNumberViewModel>(nameof(ConfirmChangePhoneNumberViewModel));
    }

    private void ConfirmClicked() => ModalService.Close(ModalResult.Ok(ConfirmPhoneNumberModel));
    private void CancelClicked() => ModalService.Cancel();
}
