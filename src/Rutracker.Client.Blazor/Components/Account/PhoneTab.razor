@inject IModalService ModalService

<MatTab>
    <LabelContent>Phone</LabelContent>
    <ChildContent>
        <EditForm Model="@ChangePhoneNumberModel" OnValidSubmit="@ChangeClicked">
            <div class="form-group">
                <DataAnnotationsValidator />
                <ValidationSummary />
            </div>

            <div class="form-group">
                <MatTextField @bind-Value="@ChangePhoneNumberModel.PhoneNumber"
                              Label="Phone number"
                              Icon="@MatIconNames.Phone"
                              IconTrailing="true"
                              FullWidth="true"
                              Required="true" />
            </div>

            <div class="d-flex flex-row-reverse mt-4">
                <MatButton Label="Change phone" Raised="true" type="submit" />
            </div>
        </EditForm>
    </ChildContent>
</MatTab>

@code
{
    [Parameter] public string Phone { get; set; }
    [Parameter] public EventCallback<ChangePhoneNumberViewModel> OnChange { get; set; }
    [Parameter] public EventCallback<ConfirmChangePhoneNumberViewModel> OnConfirm { get; set; }

    private ChangePhoneNumberViewModel ChangePhoneNumberModel { get; set; } = new ChangePhoneNumberViewModel();

    protected override void OnParametersSet() => ChangePhoneNumberModel.PhoneNumber = Phone;

    private async Task ChangeClicked()
    {
        if (Phone == ChangePhoneNumberModel.PhoneNumber) return;

        await OnChange.InvokeAsync(ChangePhoneNumberModel);

        ConfirmModalOpened();
    }

    private void ConfirmModalOpened()
    {
        var parameters = new ModalParameters();

        parameters.Add(nameof(ConfirmChangePhoneNumberViewModel), new ConfirmChangePhoneNumberViewModel
        {
            Phone = ChangePhoneNumberModel.PhoneNumber
        });

        ModalService.OnClose += ConfirmModalClosed;
        ModalService.Show("Confirm phone number", typeof(PhoneConfirmModal), parameters);
    }

    private async void ConfirmModalClosed(ModalResult result)
    {
        if (!result.Cancelled && result.Data is ConfirmChangePhoneNumberViewModel model)
        {
            await OnConfirm.InvokeAsync(model);
        }

        ModalService.OnClose -= ConfirmModalClosed;
    }
}