@inherits PageComponent
@inject IUserService UserService
@inject IModalService ModalService

<MatTab>
    <LabelContent>Phone</LabelContent>
    <ChildContent>
        <EditForm Model="@ChangePhoneNumberModel" OnValidSubmit="@ChangeClicked">
            <div class="form-group">
                <DataAnnotationsValidator />
                <ValidationSummary />
            </div>

            <div class="form-group">
                <MatTextField @bind-Value="@ChangePhoneNumberModel.PhoneNumber"
                              Label="Phone number"
                              Icon="@MatIconNames.Phone"
                              IconTrailing="true"
                              FullWidth="true"
                              Required="true" />
            </div>

            <div class="form-group mt-4 d-flex justify-content-end">
                <MatButton Label="Change phone" Raised="true" type="submit" class="ml-2" />
            </div>
        </EditForm>
    </ChildContent>
</MatTab>

@code
{
    [Parameter] public UserDetailsViewModel UserModel { get; set; }
    [Parameter] public EventCallback OnChange { get; set; }

    private ChangePhoneNumberViewModel ChangePhoneNumberModel { get; set; } = new ChangePhoneNumberViewModel();

    protected override void OnParametersSet() => ChangePhoneNumberModel.PhoneNumber = UserModel.PhoneNumber;

    private async Task ChangePhoneNumberAsync()
    {
        if (UserModel.PhoneNumber == ChangePhoneNumberModel.PhoneNumber)
        {
            return;
        }

        await UserService.ChangePhoneNumber(ChangePhoneNumberModel);

        MatToaster.Add("Verification code sent to phone number.", MatToastType.Success);

        ConfirmModalOpenClicked();
    }

    private async Task ChangeClicked() => await ActionAsync(ChangePhoneNumberAsync);

    private void ConfirmModalOpenClicked()
    {
        var parameters = new ModalParameters();

        parameters.Add(nameof(ConfirmChangePhoneNumberViewModel), new ConfirmChangePhoneNumberViewModel
        {
            Phone = ChangePhoneNumberModel.PhoneNumber
        });

        ModalService.OnClose += ConfirmModalClosed;
        ModalService.Show("Confirm phone number", typeof(PhoneNumberConfirmModal), parameters);
    }

    private async void ConfirmModalClosed(ModalResult result)
    {
        if (!result.Cancelled && result.Data is bool isSuccess && isSuccess)
        {
            await OnChange.InvokeAsync(EventArgs.Empty);
        }

        ModalService.OnClose -= ConfirmModalClosed;
    }
}