@if (TotalPages > 1)
{
    <div class="mat-layout-grid p-0">
        <div class="mat-layout-grid-inner">
            <div class="mat-layout-grid-cell mat-layout-grid-cell-span-12">
                <div class="mdc-paginator">
                    <div class="mdc-paginator-container">
                        <div class="mdc-paginator-range-actions">
                            <span class="mdc-paginator-range-label ml-0 mr-1 text-center">
                                @($"Page {Page} of {TotalPages}") <br />
                                @($"Total items: {TotalItems}")
                            </span>

                            <div class="mdc-paginator-range-buttons">
                                <MatIconButton OnClick="@(_ => PageChangeClicked(1))"
                                               Disabled="@(Page == 1)"
                                               Icon="@MatIconNames.First_page" />

                                <MatIconButton OnClick="@(_ => PageChangeClicked(Page - 1))"
                                               Disabled="@(!HasPrevious)"
                                               Icon="@MatIconNames.Navigate_before" />

                                <MatIconButton OnClick="@(_ => PageChangeClicked(Page + 1))"
                                               Disabled="@(!HasNext)"
                                               Icon="@MatIconNames.Navigate_next" />

                                <MatIconButton OnClick="@(_ => PageChangeClicked(TotalPages))"
                                               Disabled="@(Page == TotalPages)"
                                               Icon="@MatIconNames.Last_page" />
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code
{
    [Parameter] public int Page { get; set; }
    [Parameter] public int PageSize { get; set; }
    [Parameter] public int TotalPages { get; set; }
    [Parameter] public int TotalItems { get; set; }
    [Parameter] public EventCallback<int> OnPageChange { get; set; }

    private bool HasPrevious => Page > 1 && TotalPages > 1;
    private bool HasNext => Page < TotalPages;

    private void PageChangeClicked(int page) => OnPageChange.InvokeAsync(page);
}