@inject IModalService ModalService

<h2 class="my-3">Categories list</h2>

<MatTable Items="@Items" AllowSelection="true" class="mat-elevation-z5">
    <MatTableHeader>
        <th class="p-2 text-center">
            <MatIconButton OnClick="@CreateClicked" Icon="@MatIconNames.Add" title="Add new category" />
        </th>
        <th title="Category id">Id</th>
        <th title="Subcategory count">Count</th>
        <th title="Category name">Name</th>
    </MatTableHeader>
    <MatTableRow Context="category">
        <td>
            <div style="width:100px;">
                <MatIconButton OnClick="@(_ => UpdateClicked(category))" Icon="@MatIconNames.Edit" />
                <MatIconButton OnClick="@(_ => DeleteClicked(category))" Icon="@MatIconNames.Delete" />
            </div>
        </td>
        <td>@category.Id</td>
        <td>@category.SubcategoriesCount</td>
        <td>
            <a class="text-dark" href="@CategoryDetailsLink(category.Id)">@category.Name</a>
        </td>
    </MatTableRow>
</MatTable>

@code
{
    [Parameter] public IEnumerable<CategoryViewModel> Items { get; set; }
    [Parameter] public EventCallback<CategoryCreateViewModel> OnCreate { get; set; }
    [Parameter] public Func<CategoryViewModel, CategoryUpdateViewModel, Task> OnUpdate { get; set; }
    [Parameter] public EventCallback<CategoryViewModel> OnDelete { get; set; }

    private CategoryViewModel Category { get; set; }

    private void CreateClicked()
    {
        ModalService.OnClose += CategoryAddModalClosed;
        ModalService.Show("Create category", typeof(CategoryAddModal));
    }

    private void UpdateClicked(CategoryViewModel model)
    {
        var parameters = new ModalParameters();

        parameters.Add(nameof(CategoryUpdateViewModel), new CategoryUpdateViewModel
        {
            Name = model.Name
        });

        Category = model;

        ModalService.OnClose += CategoryUpdateModalClosed;
        ModalService.Show("Update category", typeof(CategoryUpdateModal), parameters);
    }

    private void DeleteClicked(CategoryViewModel model)
    {
        var parameters = new ModalParameters();

        parameters.Add(nameof(CategoryViewModel), model);

        ModalService.OnClose += CategoryDeleteModalClosed;
        ModalService.Show("Delete category", typeof(CategoryDeleteModal), parameters);
    }

    private async void CategoryAddModalClosed(ModalResult result)
    {
        if (!result.Cancelled && result.Data is CategoryCreateViewModel model)
        {
            await OnCreate.InvokeAsync(model);
        }

        ModalService.OnClose -= CategoryAddModalClosed;
    }

    private async void CategoryUpdateModalClosed(ModalResult result)
    {
        if (!result.Cancelled && result.Data is CategoryUpdateViewModel model)
        {
            await OnUpdate.Invoke(Category, model);
        }

        ModalService.OnClose -= CategoryUpdateModalClosed;
    }

    private async void CategoryDeleteModalClosed(ModalResult result)
    {
        if (!result.Cancelled && result.Data is CategoryViewModel model)
        {
            await OnDelete.InvokeAsync(model);
        }

        ModalService.OnClose -= CategoryDeleteModalClosed;
    }

    private static string CategoryDetailsLink(int id) => string.Format(Constants.Path.Category, id.ToString());
}
