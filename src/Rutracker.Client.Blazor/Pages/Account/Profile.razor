@attribute [Authorize(Roles = UserRoles.User)]

@inject IUserService UserService
@inject IMatToaster MatToaster
@inject IModalService ModalService

@page "/account/profile"

@if (UserDetailsModel == null)
{
    <LoadingBackground>
        <span>Loading user list, please wait...</span>
    </LoadingBackground>
}
else
{
    <div class="profile-container">
        <div class="profile-header">
            <div class="profile-header__image">
                <MatButton @onclick="@ChangeImageModalOpened"
                           class="m-0 p-0 rounded-circle w-100 h-100 mat-elevation-z5"
                           title="Click to change image">
                    @if (IsValidUserImage())
                    {
                        <img class="w-100 h-100" src="@UserDetailsModel.ImageUrl" alt="User image" />
                    }
                    else
                    {
                        <img class="w-100 h-100" src="img/profile-bg.jpg" alt="Default user image" />
                    }
                </MatButton>
            </div>

            <h1 class="profile-header__name">@UserDetailsModel.UserName</h1>

            @if (UserDetailsModel.Roles != null)
            {
                <MatChipSet>
                    @foreach (var role in UserDetailsModel.Roles)
                    {
                        <MatChip Label="@role" />
                    }
                </MatChipSet>
            }
        </div>

        <div class="profile-body">
            <MatTabGroup>
                <InfoTab UserModel="@UserDetailsModel" OnChange="@OnChanged" />
                <PasswordTab />
                <EmailTab UserModel="@UserDetailsModel" OnChange="@OnChanged" />
                <PhoneNumberTab UserModel="@UserDetailsModel" OnChange="@OnChanged" />
            </MatTabGroup>
        </div>
    </div>
}

@code
{
    private UserDetailsViewModel UserDetailsModel { get; set; }

    protected override async Task OnInitializedAsync() => await LoadUserModelAsync();

    private async Task LoadUserModelAsync()
    {
        try
        {
            UserDetailsModel = await UserService.UserDetails();
        }
        catch (Exception ex)
        {
            MatToaster.Add(ex.Message, MatToastType.Warning);
        }
    }

    private void ChangeImageModalOpened()
    {
        ModalService.OnClose += ChangeImageModalClosed;
        ModalService.Show("Change image", typeof(ChangeImageModal));
    }

    private async void ChangeImageModalClosed(ModalResult result)
    {
        if (!result.Cancelled && result.Data is bool isSuccess && isSuccess)
        {
            await OnChanged();
        }

        ModalService.OnClose -= ChangeImageModalClosed;
    }

    private async Task OnChanged()
    {
        await LoadUserModelAsync();
        StateHasChanged();
    }

    private bool IsValidUserImage() => !string.IsNullOrWhiteSpace(UserDetailsModel.ImageUrl);
}