@attribute [Authorize]

@inject AppState AppState
@inject IMatToaster MatToaster

@page "/account/profile"

@if (AppState.SearchInProgress)
{
    <LoadingBackground>
        <span>Loading user list, please wait...</span>
    </LoadingBackground>
}
else if (UserDetailsModel == null)
{
    <LoadingBackground ShowLoader="false">
        <p>Error load profile, sorry</p>
    </LoadingBackground>
}
else
{
    <div class="profile-container">
        <div class="profile-header">
            <div class="profile-header__image">
                <MatRipple Class="rounded-circle w-100 h-100 mat-elevation-z5" Style="cursor: pointer;">
                    @if (IsValidUserImage())
                    {
                        <img class="w-100 h-100" src="@UserDetailsModel.ImageUrl" alt="User image" />
                    }
                    else
                    {
                        <img class="w-100 h-100" src="img/profile-bg.jpg" alt="Default user image" />
                    }
                </MatRipple>
            </div>

            <h1 class="profile-header__name">@UserDetailsModel.UserName</h1>

            @if (UserDetailsModel.Roles != null)
            {
                <MatChipSet>
                    @foreach (var role in UserDetailsModel.Roles)
                    {
                        <MatChip Label="@role" />
                    }
                </MatChipSet>
            }
        </div>

        <div class="profile-body">
            <MatTabGroup>
                <UserInfoTab UserModel="@UserDetailsModel" OnUpdateClick="@UpdateUserClicked" />
            </MatTabGroup>
        </div>
    </div>
}

@code
{
    private UserDetailsViewModel UserDetailsModel { get; set; }

    protected override async Task OnInitAsync() => await LoadUserModelAsync();

    private async Task LoadUserModelAsync()
    {
        try
        {
            UserDetailsModel = await AppState.UserDetails();
        }
        catch (Exception ex)
        {
            MatToaster.Add(ex.Message, MatToastType.Warning, "Error load user");
        }
    }

    private async Task UpdateUserClicked(EditUserViewModel model)
    {
        try
        {
            await AppState.UpdateUser(model);
            await LoadUserModelAsync();

            StateHasChanged();
        }
        catch (Exception ex)
        {
            MatToaster.Add(ex.Message, MatToastType.Warning, "Error update user");
        }
    }

    private bool IsValidUserImage() => !string.IsNullOrWhiteSpace(UserDetailsModel.ImageUrl);
}