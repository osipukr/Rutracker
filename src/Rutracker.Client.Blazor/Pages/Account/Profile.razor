@attribute [Authorize(Policy = Policies.IsUser)]

@inject IUserService UserService

@page "/account/profile"

<Page Title="user information" Action="@LoadAction" Errors="@Errors">
    <div class="profile-container">
        <div class="profile-header">
            <UserImage @key="@ImageRenderKey"
                       Url="@UserModel.ImageUrl"
                       OnChange="@ChangeImageAsync"
                       OnChangeFile="@ChangeImageFileAsync"
                       OnDelete="@DeleteImageAsync" />

            <h1 class="profile-header__name">@UserModel.UserName</h1>

            @if (UserModel.Roles != null)
            {
                <MatChipSet>
                    @foreach (var role in UserModel.Roles)
                    {
                        <MatChip Label="@role" />
                    }
                </MatChipSet>
            }
        </div>

        <div class="profile-body">
            <MatTabGroup>
                <UserInfoTab UserModel="@UserModel" OnChange="@ChangeUserAsync" />
                <PasswordTab OnChange="@ChangePasswordAsync" />
                <EmailTab Email="@UserModel.Email" OnChange="@ChangeEmailAsync" />
                <PhoneTab Phone="@UserModel.PhoneNumber" OnChange="@ChangePhoneAsync" OnConfirm="@ConfirmPhoneAsync" />
            </MatTabGroup>
        </div>
    </div>
</Page>

@code
{
    private UserDetailsViewModel UserModel { get; set; }
    private string ImageRenderKey { get; set; }

    protected override async Task OnInitializedAsync() => await LoadAsync(UserAsync);

    private async Task UserAsync() => UserModel = await UserService.FindAsync();

    private async Task ChangeImageAsync(ChangeImageViewModel model) => await ActionAsync(async () =>
    {
        UserModel.ImageUrl = await UserService.ChangeImageAsync(model);
        ImageRenderKey = Guid.NewGuid().ToString();
    }, successMessage: "Image successfully changed.");

    private async Task ChangeImageFileAsync(ChangeImageFileViewModel model) => await ActionAsync(async () =>
    {
        UserModel.ImageUrl = await UserService.ChangeImageAsync(model);
        ImageRenderKey = Guid.NewGuid().ToString();
    }, successMessage: "Image successfully changed.");

    private async Task DeleteImageAsync() => await ActionAsync(async () =>
    {
        await UserService.DeleteImageAsync();

        UserModel.ImageUrl = null;
        ImageRenderKey = Guid.NewGuid().ToString();
    }, successMessage: "Image successfully changed.");

    private async Task ChangeUserAsync(ChangeUserViewModel model) => await ActionAsync(async () =>
    {
        if (UserModel.FirstName == model.FirstName && UserModel.LastName == model.LastName) return;

        UserModel = await UserService.ChangeInfoAsync(model);

        MatToaster.Add("User successfully changed.", MatToastType.Success);
    });

    private async Task ChangeEmailAsync(ChangeEmailViewModel model) => await ActionAsync(async () =>
    {
        if (UserModel.Email == model.Email) return;

        await UserService.ChangeEmailAsync(model);

        MatToaster.Add("Please check your email to confirm your changes.", MatToastType.Success);
    });

    private async Task ChangePasswordAsync(ChangePasswordViewModel model) => await ActionAsync(async () =>
    {
        await UserService.ChangePasswordAsync(model);
    }, successMessage: "Password successfully changed.");

    private async Task ChangePhoneAsync(ChangePhoneNumberViewModel model) => await ActionAsync(async () =>
    {
        await UserService.ChangePhoneAsync(model);
    }, successMessage: "Verification code sent to phone number.");

    private async Task ConfirmPhoneAsync(ConfirmChangePhoneNumberViewModel model) => await ActionAsync(async () =>
    {
        UserModel = await UserService.ConfirmChangePhoneAsync(model);
    }, successMessage: "Change phone successfully confirmed.");
}