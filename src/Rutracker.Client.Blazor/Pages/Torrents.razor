@inject AppState AppState
@inject ViewSettings ViewSettings
@inject IMatToaster MatToaster

@page "/torrents"

@if (TorrentsIndexModel != null)
{
    <Filtration Model="@FilterModel" FilterChanged="@FilterChanged" />
    <TorrentList Items="@TorrentsIndexModel.TorrentItems" />
    <Pagination Model="@TorrentsIndexModel.PaginationModel" PageChanged="@PageChanged" />
}
else if (AppState.SearchInProgress)
{
    <LoadingBackground>
        <span>Loading page model, please wait...</span>
    </LoadingBackground>
}
else
{
    <LoadingBackground ShowLoader="false">
        <p>Failed to load page model</p>
        <MatButton OnClick="@ReloadClicked" Raised="true" Label="Try again" />
    </LoadingBackground>
}

@code
{
    private TorrentsIndexViewModel TorrentsIndexModel { get; set; }
    private FiltrationViewModel FilterModel { get; set; } = new FiltrationViewModel();

    private int Page { get; set; } = 1;
    private int PageSize => ViewSettings.ItemsPerPageCount;

    protected override async Task OnInitAsync() => await LoadTorrentsIndexAsync(Page, FilterModel);

    private async Task LoadTorrentsIndexAsync(int page, FiltrationViewModel filter)
    {
        try
        {
            TorrentsIndexModel = await AppState.Torrents(page, PageSize, filter);
        }
        catch (Exception ex)
        {
            MatToaster.Add(ex.Message, MatToastType.Warning, "Failed load torrent list");
        }
    }

    private async Task ReloadClicked() => await LoadTorrentsIndexAsync(Page, FilterModel);

    private async Task PageChanged(int page) => await LoadTorrentsIndexAsync(Page = page, FilterModel);

    private async Task FilterChanged() => await PageChanged(1);
}