@inject ITorrentService TorrentService

@page "/torrents"

<Page Title="torrent list" Action="@ActionResult" Errors="@Errors">
    <Filtration OnChange="@FilterChanged" SearchInProgress="@SearchInProgress" />

    <TorrentList Items="@TorrentsPagination.Items" />

    <Pagination Page="@TorrentsPagination.Page"
                PageSize="@TorrentsPagination.PageSize"
                TotalPages="@TorrentsPagination.TotalPages"
                OnPageChange="@PageChanged"
                SearchInProgress="@SearchInProgress" />
</Page>

@code
{
    private PaginationResult<TorrentViewModel> TorrentsPagination { get; set; }
    private FilterViewModel FilterModel { get; set; } = new FilterViewModel();
    private int Page { get; set; } = 1;
    private int PageSize => ViewSettings.TorrentsPerPageCount;
    private bool SearchInProgress { get; set; }

    protected override async Task OnInitializedAsync() => await TorrentsAsync();

    private async Task TorrentsAsync() => await LoadAsync(async () =>
    {
        if (TorrentsPagination != null)
        {
            TorrentsPagination.Items = null;
            SearchInProgress = true;
            StateHasChanged();
        }

        TorrentsPagination = await TorrentService.ListAsync(Page, PageSize, FilterModel);
        SearchInProgress = TorrentsPagination.Items == null;
    });

    private async Task PageChanged(int page)
    {
        Page = page;

        await TorrentsAsync();
    }

    private async Task FilterChanged(FilterViewModel filter)
    {
        FilterModel = filter;

        await PageChanged(1);
    }
}