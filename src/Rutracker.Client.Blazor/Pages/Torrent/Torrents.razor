@inject ITorrentService TorrentService

@page "/torrents"

@if (TorrentsPagination == null)
{
    <LoadingBackground>
        <span>Loading page model, please wait...</span>
    </LoadingBackground>
}
else
{
    <Filtration FilterChanged="@FilterChanged" SearchInProgress="@SearchInProgress" />

    <TorrentList Items="@TorrentsPagination.Items" />

    <Pagination Page="@TorrentsPagination.Page"
                PageSize="@TorrentsPagination.PageSize"
                TotalPages="@TorrentsPagination.TotalPages"
                PageChanged="@PageChanged"
                SearchInProgress="@SearchInProgress" />
}

@code
{
    private PaginationResult<TorrentViewModel> TorrentsPagination { get; set; }
    private FilterViewModel FilterModel { get; set; } = new FilterViewModel();
    private int Page { get; set; } = 1;
    private int PageSize => ViewSettings.TorrentsPerPageCount;
    private bool SearchInProgress { get; set; }

    protected override async Task OnInitializedAsync() => await LoadTorrentsAsync(Page, PageSize, FilterModel);

    private async Task LoadTorrentsAsync(int page, int pageSize, FilterViewModel filter)
    {
        try
        {
            if (TorrentsPagination != null)
            {
                TorrentsPagination.Items = null;
                SearchInProgress = true;

                StateHasChanged();
            }

            TorrentsPagination = await TorrentService.ListAsync(page, pageSize, filter);
            SearchInProgress = TorrentsPagination.Items == null;

            StateHasChanged();
        }
        catch (Exception ex)
        {
            MatToaster.Add(ex.Message, MatToastType.Warning);
        }
    }

    private async Task PageChanged(int page) => await LoadTorrentsAsync(Page = page, PageSize, FilterModel);
    private async Task FilterChanged(FilterViewModel filter) => await LoadTorrentsAsync(Page = 1, PageSize, FilterModel = filter);
}