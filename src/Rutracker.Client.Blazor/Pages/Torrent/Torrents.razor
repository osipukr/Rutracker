@inject AppState AppState
@inject ViewSettings ViewSettings
@inject IMatToaster MatToaster

@page "/torrents"

@if (TorrentsPagination != null)
{
    <Filtration Model="@FilterModel" FilterChanged="@FilterChanged" />

    <TorrentList Items="@TorrentsPagination.Items" />

    <Pagination Page="@TorrentsPagination.Page"
                PageSize="@TorrentsPagination.PageSize"
                TotalPages="@TorrentsPagination.TotalPages"
                PageChanged="@PageChanged" />
}
else if (AppState.SearchInProgress)
{
    <LoadingBackground>
        <span>Loading page model, please wait...</span>
    </LoadingBackground>
}
else
{
    <LoadingBackground ShowLoader="false">
        <p>Failed to load page model</p>
        <MatButton @onclick="@ReloadClicked" Raised="true" Label="Try again" />
    </LoadingBackground>
}

@code
{
    private PaginationResult<TorrentViewModel> TorrentsPagination { get; set; }
    private FilterViewModel FilterModel { get; set; } = new FilterViewModel();

    private int Page { get; set; } = 1;
    private int PageSize => ViewSettings.TorrentsPerPageCount;

    protected override async Task OnInitializedAsync() => await LoadTorrentsIndexAsync(Page, PageSize, FilterModel);

    private async Task LoadTorrentsAsync(int page, int pageSize, FilterViewModel filter)
    {
        try
        {
            TorrentsPagination = await AppState.Torrents(page, pageSize, filter);
        }
        catch (Exception ex)
        {
            MatToaster.Add(ex.Message, MatToastType.Warning);
        }
    }

    private async Task ReloadClicked() => await LoadTorrentsAsync(Page, PageSize, FilterModel);
    private async Task PageChanged(int page) => await LoadTorrentsAsync(Page = page, PageSize, FilterModel);
    private async Task FilterChanged() => await PageChanged(1);
}