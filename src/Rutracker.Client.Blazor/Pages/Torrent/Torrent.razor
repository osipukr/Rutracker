@inject ITorrentService TorrentService
@inject ICommentService CommentService

@page "/torrents/{id:int}"

<div class="mat-layout-grid px-0 pb-5">
    <div class="mat-layout-grid-inner">
        <div class="mat-layout-grid-cell">
            <MatIconButton Link="@Constants.Path.Torrents" Icon="@MatIconNames.Arrow_back" />
        </div>
    </div>
</div>

<Page Title="torrent information" Action="@ActionResult" Errors="@Errors">
    <TorrentDetails Torrent="@TorrentDetailsModel" />

    <CommentList Items="@Comments"
                 OnCreate="@CommentCreateAsync"
                 OnUpdate="@CommentUpdateAsync"
                 OnDelete="@CommentDeleteAsync"
                 OnLike="@CommentLikeAsync" />
</Page>

@code
{
    [Parameter] public int Id { get; set; }

    private TorrentDetailsViewModel TorrentDetailsModel { get; set; }
    private List<CommentViewModel> Comments { get; set; } = new List<CommentViewModel>();

    protected override async Task OnInitializedAsync() => await TorrentWithCommentsAsync();

    private async Task TorrentWithCommentsAsync() => await LoadAsync(async () =>
    {
        TorrentDetailsModel = await TorrentService.FindAsync(Id);
        Comments = (await CommentService.ListAsync(TorrentDetailsModel.Id)).ToList();
    });

    private async Task CommentCreateAsync(CommentCreateViewModel comment) => await ActionAsync(async () =>
    {
        comment.TorrentId = TorrentDetailsModel.Id;

        var result = await CommentService.AddAsync(comment);

        MatToaster.Add("Comment created successfully.", MatToastType.Success);

        Comments.Add(result);
    });

    private async Task CommentUpdateAsync(CommentViewModel comment, CommentUpdateViewModel model) => await ActionAsync(async () =>
    {
        if (comment.Text == model.Text)
        {
            return;
        }

        var result = await CommentService.UpdateAsync(comment.Id, model);

        MatToaster.Add("Comment updated successfully.", MatToastType.Success);

        var index = Comments.FindIndex(x => x.Id == comment.Id);

        Comments[index] = result;
    });

    private async Task CommentDeleteAsync(int id) => await ActionAsync(async () =>
    {
        await CommentService.DeleteAsync(id);

        MatToaster.Add("Comment deleted successfully.", MatToastType.Success);

        var index = Comments.FindIndex(x => x.Id == id);

        Comments.RemoveAt(index);
    });

    private async Task CommentLikeAsync(int id) => await ActionAsync(async () =>
    {
        var comment = await CommentService.LikeCommentAsync(id);
        var index = Comments.FindIndex(x => x.Id == id);

        Comments[index] = comment;
    });
}