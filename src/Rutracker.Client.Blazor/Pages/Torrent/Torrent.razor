@inject ITorrentService TorrentService
@inject ICommentService CommentService

@page "/torrents/{id:int}"

<div class="mat-layout-grid px-0 pb-5">
    <div class="mat-layout-grid-inner">
        <div class="mat-layout-grid-cell">
            <MatIconButton Link="@Constants.Path.Torrents" Icon="@MatIconNames.Arrow_back" />
        </div>
    </div>
</div>

<Page Title="torrent information" Action="@ActionResult" Errors="@Errors">
    <TorrentDetails Torrent="@TorrentDetailsModel" />

    <CommentList Items="@Comments"
                 OnCreate="@(x => ActionAsync(() => CommentCreateAsync(x)))"
                 OnUpdate="@((x, y) => ActionAsync(() => CommentUpdateAsync(x, y)))"
                 OnDelete="@(x => ActionAsync(() => CommentDeleteAsync(x)))"
                 OnLike="@(x => ActionAsync(() => CommentLikeAsync(x)))" />
</Page>

@code
{
    [Parameter] public int Id { get; set; }

    private TorrentDetailsViewModel TorrentDetailsModel { get; set; }
    private List<CommentViewModel> Comments { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadAsync(TorrentAsync);
        await LoadAsync(CommentsAsync);
    }

    private async Task TorrentAsync() => TorrentDetailsModel = await TorrentService.FindAsync(Id);
    private async Task CommentsAsync() => Comments = (await CommentService.ListAsync(TorrentDetailsModel.Id)).ToList();

    private async Task CommentCreateAsync(CommentCreateViewModel comment)
    {
        comment.TorrentId = TorrentDetailsModel.Id;

        var result = await CommentService.AddAsync(comment);

        MatToaster.Add("Comment created successfully.", MatToastType.Success);

        Comments.Add(result);
        StateHasChanged();
    }

    private async Task CommentUpdateAsync(CommentViewModel comment, CommentUpdateViewModel model)
    {
        var result = await CommentService.UpdateAsync(comment.Id, model);

        MatToaster.Add("Comment updated successfully.", MatToastType.Success);

        var index = Comments.FindIndex(x => x.Id == comment.Id);

        Comments[index] = result;
        StateHasChanged();
    }

    private async Task CommentDeleteAsync(int id)
    {
        await CommentService.DeleteAsync(id);

        MatToaster.Add("Comment deleted successfully.", MatToastType.Success);

        var index = Comments.FindIndex(x => x.Id == id);

        Comments.RemoveAt(index);
        StateHasChanged();
    }

    private async Task CommentLikeAsync(int id)
    {
        var comment = await CommentService.LikeCommentAsync(id);
        var index = Comments.FindIndex(x => x.Id == id);

        Comments[index] = comment;
        StateHasChanged();
    }
}