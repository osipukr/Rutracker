@inject AppState AppState
@inject ICommentService CommentService
@inject IMatToaster MatToaster

@page "/torrents/{id:int}"

@if (AppState.SearchInProgress)
{
    <LoadingBackground>
        <span>Loading page model, please wait...</span>
    </LoadingBackground>
}
else if (TorrentDetailsModel == null)
{
    <LoadingBackground ShowLoader="false">
        <p>Torrent with id=@Id not found</p>
        <MatButton Link="@Constants.Path.Torrents" Label="Return to full torrents list" Raised="true" />
    </LoadingBackground>
}
else
{
    <div class="mat-layout-grid px-0 pb-5">
        <div class="mat-layout-grid-inner">
            <div class="mat-layout-grid-cell">
                <MatIconButton Link="@Constants.Path.Torrents" Icon="@MatIconNames.Arrow_back" />
            </div>
        </div>
    </div>

    <TorrentDetails Torrent="@TorrentDetailsModel"
                    Comments="@Comments"
                    OnCommentCreate="@CreateCommentAsync"
                    OnCommentLike="@CommentLikeAsync" />
}

@code
{
    [Parameter] public int Id { get; set; }

    private TorrentDetailsViewModel TorrentDetailsModel { get; set; }
    private List<CommentViewModel> Comments { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadTorrentAsync();
        await LoadCommentsAsync();
    }

    private async Task LoadTorrentAsync()
    {
        try
        {
            TorrentDetailsModel = await AppState.Torrent(Id);
        }
        catch (Exception ex)
        {
            MatToaster.Add(ex.Message, MatToastType.Warning);
        }
    }

    private async Task LoadCommentsAsync()
    {
        try
        {
            Comments = (await CommentService.ListAsync(TorrentDetailsModel.Id))?.ToList();
        }
        catch (Exception ex)
        {
            MatToaster.Add(ex.Message, MatToastType.Warning);
        }
    }

    private async Task CreateCommentAsync(CommentCreateViewModel comment)
    {
        try
        {
            comment.TorrentId = TorrentDetailsModel.Id;

            var result = await CommentService.AddAsync(comment);

            Comments.Add(result);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            MatToaster.Add(ex.Message, MatToastType.Warning);
        }
    }

    private async Task CommentLikeAsync(int commentId)
    {
        try
        {
            var comment = await CommentService.LikeCommentAsync(commentId);
            var index = Comments.FindIndex(x => x.Id == commentId);

            Comments[index] = comment;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            MatToaster.Add(ex.Message, MatToastType.Warning);
        }
    }
}