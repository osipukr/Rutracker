@attribute [Authorize(Roles = UserRoles.Admin)]

@inject ICategoryService CategoryService

@page "/categories"

<Page Title="category list" Action="@ActionResult" Errors="@Errors">
    <CategoryList Items="@CategoriesItems"
                  OnCreate="@(x => ActionAsync(() => CreateCategoryAsync(x)))"
                  OnUpdate="@((x, y) => ActionAsync(() => UpdateCategoryAsync(x, y)))"
                  OnDelete="@(x => ActionAsync(() => DeleteCategoryAsync(x)))" />
</Page>

@code
{
    private List<CategoryViewModel> CategoriesItems { get; set; }

    protected override async Task OnInitializedAsync() => await LoadAsync(CategoriesAsync);

    private async Task CategoriesAsync() => CategoriesItems = (await CategoryService.ListAsync())?.ToList();

    private async Task CreateCategoryAsync(CategoryCreateViewModel model)
    {
        var category = await CategoryService.CreateAsync(model);

        MatToaster.Add("Category successfully created.", MatToastType.Success);
        CategoriesItems.Add(category);

        StateHasChanged();
    }

    private async Task UpdateCategoryAsync(CategoryViewModel category, CategoryUpdateViewModel model)
    {
        if (category.Name == model.Name)
        {
            return;
        }

        var result = await CategoryService.UpdateAsync(category.Id, model);

        MatToaster.Add("Category successfully updated.", MatToastType.Success);

        var index = CategoriesItems.FindIndex(x => x.Id == category.Id);

        CategoriesItems[index] = result;
        StateHasChanged();
    }

    private async Task DeleteCategoryAsync(CategoryViewModel model)
    {
        await CategoryService.DeleteAsync(model.Id);

        MatToaster.Add("Category successfully deleted.", MatToastType.Success);
        CategoriesItems.Remove(model);

        StateHasChanged();
    }
}