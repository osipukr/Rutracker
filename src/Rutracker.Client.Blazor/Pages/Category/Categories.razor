@attribute [Authorize(Roles = "admin")]

@inject AppState AppState
@inject ICategoryService CategoryService
@inject IMatToaster MatToaster

@page "/categories"

@if (AppState.SearchInProgress)
{
    <LoadingBackground>
        <span>Loading page model, please wait...</span>
    </LoadingBackground>
}
else if (CategoriesItems == null)
{
    <LoadingBackground ShowLoader="false">
        <p>Failed to load page model</p>
        <MatButton Link="@Constants.Path.Home" Raised="true" Label="Return to home" />
    </LoadingBackground>
}
else if (CategoriesItems.Count == 0)
{
    <LoadingBackground ShowLoader="false">
        <p class="m-0">Sorry, but category list is empty</p>
    </LoadingBackground>
}
else
{
    <CategoryList Items="@CategoriesItems" OnCreate="@CreateCategoryAsync" OnDelete="@DeleteCategoryAsync" />
}

@code
{
    private List<CategoryViewModel> CategoriesItems { get; set; }

    protected override async Task OnInitAsync() => await LoadCategoriesAsync();

    private async Task LoadCategoriesAsync()
    {
        try
        {
            CategoriesItems = (await AppState.Categories()).ToList();
        }
        catch (Exception ex)
        {
            MatToaster.Add(ex.Message, MatToastType.Warning, "Load categories");
        }
    }

    private async Task CreateCategoryAsync(CategoryCreateViewModel model)
    {
        try
        {
            var category = await CategoryService.CreateAsync(model);

            MatToaster.Add("Category successfully created.", MatToastType.Success, "Create category");

            CategoriesItems.Add(category);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            MatToaster.Add(ex.Message, MatToastType.Warning, "Create category");
        }
    }

    private async Task DeleteCategoryAsync(CategoryViewModel model)
    {
        try
        {
            await CategoryService.DeleteAsync(model.Id);

            MatToaster.Add("Category successfully deleted.", MatToastType.Success, "Delete category");

            CategoriesItems.Remove(model);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            MatToaster.Add(ex.Message, MatToastType.Warning, "Delete category");
        }
    }
}