@attribute [Authorize(Roles = UserRoles.Admin)]

@inject ICategoryService CategoryService
@inject IMatToaster MatToaster

@page "/categories"

@if (CategoriesItems == null)
{
    <LoadingBackground>
        <span>Loading page model, please wait...</span>
    </LoadingBackground>
}
else if (CategoriesItems.Count == 0)
{
    <LoadingBackground ShowLoader="false">
        <span>Sorry, but category list is empty...</span>
    </LoadingBackground>
}
else
{
    <CategoryList Items="@CategoriesItems"
                  OnCreate="@CreateCategoryAsync"
                  OnUpdate="@UpdateCategoryAsync"
                  OnDelete="@DeleteCategoryAsync" />
}

@code
{
    private List<CategoryViewModel> CategoriesItems { get; set; }

    protected override async Task OnInitializedAsync() => await LoadCategoriesAsync();

    private async Task LoadCategoriesAsync()
    {
        try
        {
            CategoriesItems = (await CategoryService.ListAsync())?.ToList();
        }
        catch (Exception ex)
        {
            MatToaster.Add(ex.Message, MatToastType.Warning);
        }
    }

    private async Task CreateCategoryAsync(CategoryCreateViewModel model)
    {
        try
        {
            var category = await CategoryService.CreateAsync(model);

            MatToaster.Add("Category successfully created.", MatToastType.Success);
            CategoriesItems.Add(category);

            StateHasChanged();
        }
        catch (Exception ex)
        {
            MatToaster.Add(ex.Message, MatToastType.Warning);
        }
    }

    private async Task UpdateCategoryAsync(CategoryViewModel category, CategoryUpdateViewModel model)
    {
        if (category.Name == model.Name)
        {
            return;
        }

        try
        {
            var result = await CategoryService.UpdateAsync(category.Id, model);

            MatToaster.Add("Category successfully updated.", MatToastType.Success);
            CategoriesItems.Remove(category);
            CategoriesItems.Add(result);

            StateHasChanged();
        }
        catch (Exception ex)
        {
            MatToaster.Add(ex.Message, MatToastType.Warning);
        }
    }

    private async Task DeleteCategoryAsync(CategoryViewModel model)
    {
        try
        {
            await CategoryService.DeleteAsync(model.Id);

            MatToaster.Add("Category successfully deleted.", MatToastType.Success);
            CategoriesItems.Remove(model);

            StateHasChanged();
        }
        catch (Exception ex)
        {
            MatToaster.Add(ex.Message, MatToastType.Warning);
        }
    }
}