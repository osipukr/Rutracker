@attribute [Authorize(Roles = "admin")]

@inject AppState AppState
@inject ISubcategoryService SubcategoryService
@inject IMatToaster MatToaster

@page "/categories/{id:int}"

@if (AppState.SearchInProgress)
{
    <LoadingBackground>
        <span>Loading page model, please wait...</span>
    </LoadingBackground>
}
else if (CategoryItem == null)
{
    <LoadingBackground ShowLoader="false">
        <p>Category with id=@Id not found</p>
        <MatButton Link="@Constants.Path.Categories" Raised="true" Label="Return to full categories list" />
    </LoadingBackground>
}
else
{
    <div class="mat-layout-grid px-0 pb-5">
        <div class="mat-layout-grid-inner">
            <div class="mat-layout-grid-cell">
                <MatIconButton Icon="@MatIconNames.Arrow_back" Link="@Constants.Path.Categories" />
            </div>
        </div>
    </div>

    <h1 class="mb-3">@CategoryItem.Name</h1>

    <SubcategoryList Items="@Subcategories"
                     OnCreate="@CreateSubcategoryAsync"
                     OnUpdate="@UpdateSubcategoryAsync"
                     OnDelete="@DeleteSubcategoryAsync" />
}

@code
{
    [Parameter] private int Id { get; set; }

    private CategoryViewModel CategoryItem { get; set; }
    private List<SubcategoryViewModel> Subcategories { get; set; }

    protected override async Task OnInitAsync() => await LoadCategoryAsync();

    private async Task LoadCategoryAsync()
    {
        try
        {
            CategoryItem = await AppState.Category(Id);
            Subcategories = (await SubcategoryService.ListAsync(Id))?.ToList();
        }
        catch (Exception ex)
        {
            MatToaster.Add(ex.Message, MatToastType.Warning, "Load category");
        }
    }

    private async Task CreateSubcategoryAsync(SubcategoryCreateViewModel model)
    {
        try
        {
            model.CategoryId = Id;

            var subcategory = await SubcategoryService.CreateAsync(model);

            MatToaster.Add("Subcategory successfully created.", MatToastType.Success, "Create subcategory");

            Subcategories.Add(subcategory);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            MatToaster.Add(ex.Message, MatToastType.Warning, "Create category");
        }
    }

    private async Task UpdateSubcategoryAsync(SubcategoryViewModel subcategory, SubcategoryUpdateViewModel model)
    {
        try
        {
            var result = await SubcategoryService.UpdateAsync(subcategory.Id, model);

            MatToaster.Add("Subcategory successfully updated.", MatToastType.Success, "Update subcategory");

            Subcategories.Remove(subcategory);
            Subcategories.Add(result);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            MatToaster.Add(ex.Message, MatToastType.Warning, "Update subcategory");
        }
    }

    private async Task DeleteSubcategoryAsync(SubcategoryViewModel model)
    {
        try
        {
            await SubcategoryService.DeleteAsync(model.Id);

            MatToaster.Add("Subcategory successfully deleted.", MatToastType.Success, "Delete subcategory");

            Subcategories.Remove(model);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            MatToaster.Add(ex.Message, MatToastType.Warning, "Delete subcategory");
        }
    }
}