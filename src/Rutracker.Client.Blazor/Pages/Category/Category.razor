@attribute [Authorize(Roles = UserRoles.Admin)]

@inject ICategoryService CategoryService
@inject ISubcategoryService SubcategoryService
@inject IMatToaster MatToaster

@page "/categories/{id:int}"

@if (CategoryItem == null)
{
    <LoadingBackground>
        <span>Loading page model, please wait...</span>
    </LoadingBackground>
}
else
{
    <div class="mat-layout-grid px-0 pb-5">
        <div class="mat-layout-grid-inner">
            <div class="mat-layout-grid-cell">
                <MatIconButton Link="@Constants.Path.Categories" Icon="@MatIconNames.Arrow_back" />
            </div>
        </div>
    </div>

    <h2>@CategoryItem.Name</h2>

    <h4 class="mt-3 mb-1">Subcategories list:</h4>

    <SubcategoryList Items="@Subcategories"
                     OnCreate="@CreateSubcategoryAsync"
                     OnUpdate="@UpdateSubcategoryAsync"
                     OnDelete="@DeleteSubcategoryAsync" />
}

@code
{
    [Parameter] public int Id { get; set; }

    private CategoryViewModel CategoryItem { get; set; }
    private List<SubcategoryViewModel> Subcategories { get; set; }

    protected override async Task OnInitializedAsync() => await LoadCategoryAsync();

    private async Task LoadCategoryAsync()
    {
        try
        {
            CategoryItem = await CategoryService.FindAsync(Id);
            Subcategories = (await SubcategoryService.ListAsync(Id))?.ToList();
        }
        catch (Exception ex)
        {
            MatToaster.Add(ex.Message, MatToastType.Warning);
        }
    }

    private async Task CreateSubcategoryAsync(SubcategoryCreateViewModel model)
    {
        try
        {
            model.CategoryId = Id;

            var subcategory = await SubcategoryService.CreateAsync(model);

            MatToaster.Add("Subcategory successfully created.", MatToastType.Success);
            Subcategories.Add(subcategory);

            StateHasChanged();
        }
        catch (Exception ex)
        {
            MatToaster.Add(ex.Message, MatToastType.Warning);
        }
    }

    private async Task UpdateSubcategoryAsync(SubcategoryViewModel subcategory, SubcategoryUpdateViewModel model)
    {
        if (subcategory.Name == model.Name)
        {
            return;
        }

        try
        {
            var result = await SubcategoryService.UpdateAsync(subcategory.Id, model);

            MatToaster.Add("Subcategory successfully updated.", MatToastType.Success);
            Subcategories.Remove(subcategory);
            Subcategories.Add(result);

            StateHasChanged();
        }
        catch (Exception ex)
        {
            MatToaster.Add(ex.Message, MatToastType.Warning);
        }
    }

    private async Task DeleteSubcategoryAsync(SubcategoryViewModel model)
    {
        try
        {
            await SubcategoryService.DeleteAsync(model.Id);

            MatToaster.Add("Subcategory successfully deleted.", MatToastType.Success);
            Subcategories.Remove(model);

            StateHasChanged();
        }
        catch (Exception ex)
        {
            MatToaster.Add(ex.Message, MatToastType.Warning);
        }
    }
}