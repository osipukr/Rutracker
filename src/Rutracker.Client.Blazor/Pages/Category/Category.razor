@attribute [Authorize(Roles = UserRoles.Admin)]

@inject ICategoryService CategoryService
@inject ISubcategoryService SubcategoryService

@page "/categories/{id:int}"

<div class="mat-layout-grid px-0 pb-5">
    <div class="mat-layout-grid-inner">
        <div class="mat-layout-grid-cell">
            <MatIconButton Link="@Constants.Path.Categories" Icon="@MatIconNames.Arrow_back" />
        </div>
    </div>
</div>

<Page Title="category" Action="@ActionResult" Errors="@Errors">
    <h2>@CategoryModel.Name</h2>

    <SubcategoryList Items="@Subcategories"
                     OnCreate="@(x => ActionAsync(() => CreateSubcategoryAsync(x)))"
                     OnUpdate="@((x, y) => ActionAsync(() => UpdateSubcategoryAsync(x, y)))"
                     OnDelete="@(x => ActionAsync(() => DeleteSubcategoryAsync(x)))" />
</Page>

@code
{
    [Parameter] public int Id { get; set; }

    private CategoryViewModel CategoryModel { get; set; }
    private List<SubcategoryViewModel> Subcategories { get; set; } = new List<SubcategoryViewModel>();

    protected override async Task OnInitializedAsync() => await CategoryAsync();

    private async Task CategoryAsync() => await LoadAsync(async () =>
    {
        CategoryModel = await CategoryService.FindAsync(Id);
        Subcategories = (await SubcategoryService.ListAsync(Id))?.ToList();
    });

    private async Task CreateSubcategoryAsync(SubcategoryCreateViewModel model) => await ActionAsync(async () =>
    {
        model.CategoryId = Id;

        var subcategory = await SubcategoryService.CreateAsync(model);

        MatToaster.Add("Subcategory successfully created.", MatToastType.Success);

        Subcategories.Add(subcategory);
    });

    private async Task UpdateSubcategoryAsync(SubcategoryViewModel subcategory, SubcategoryUpdateViewModel model) => await ActionAsync(async () =>
    {
        if (subcategory.Name == model.Name)
        {
            return;
        }

        var result = await SubcategoryService.UpdateAsync(subcategory.Id, model);

        MatToaster.Add("Subcategory successfully updated.", MatToastType.Success);

        var index = Subcategories.FindIndex(x => x.Id == subcategory.Id);

        Subcategories[index] = result;
    });

    private async Task DeleteSubcategoryAsync(SubcategoryViewModel model) => await ActionAsync(async () =>
    {
        await SubcategoryService.DeleteAsync(model.Id);

        MatToaster.Add("Subcategory successfully deleted.", MatToastType.Success);

        Subcategories.Remove(model);
    });
}