@inject AppState AppState
@inject IMatToaster MatToaster

@page "/torrents/{id:int}"

@if (AppState.SearchInProgress)
{
    <LoadingBackground>
        <span>Loading page model, please wait...</span>
    </LoadingBackground>
}
else if (TorrentDetailsModel == null)
{
    <LoadingBackground ShowLoader="false">
        <p>Torrent with id=@Id not found</p>
        <MatButton Link="@Constants.Path.Torrents" Raised="true" Label="Return to full torrents list" />
    </LoadingBackground>
}
else
{
    <div class="mat-layout-grid px-0 pb-5">
        <div class="mat-layout-grid-inner">
            <div class="mat-layout-grid-cell">
                <MatIconButton Icon="@MatIconNames.Arrow_back" Link="@Constants.Path.Torrents" />
            </div>
        </div>
    </div>

    <TorrentDetails Model="@TorrentDetailsModel" />
}

@code
{
    [Parameter] private int Id { get; set; }

    private TorrentDetailsViewModel TorrentDetailsModel { get; set; }

    protected override async Task OnInitAsync() => await LoadTorrentIndexAsync();

    private async Task LoadTorrentIndexAsync()
    {
        try
        {
            TorrentDetailsModel = await AppState.Torrent(Id);
        }
        catch (Exception ex)
        {
            MatToaster.Add(ex.Message, MatToastType.Warning, "Failed load torrent info");
        }
    }
}