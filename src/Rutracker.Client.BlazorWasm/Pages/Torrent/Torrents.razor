@inject ITorrentService TorrentService

@page "/torrents"

<Page Action="@LoadAction" Errors="@Errors">
    <Filtration OnChange="@FilterChanged" />

    @if (TorrentsPagination != null)
    {
        <ListItemsHeader Title="Total torrents" TotalItems="@TorrentsPagination.TotalItems">
            <AuthorizeView Policy="@Policies.IsUser">
                <NotAuthorized>
                    <MatIconButton Link="@Constants.Path.Login" Icon="@MatIconNames.Add" title="Create new torrent" />
                </NotAuthorized>
                <Authorized>
                    <MatIconButton Link="@Constants.Path.TorrentCreate" Icon="@MatIconNames.Add" title="Create new torrent" />
                </Authorized>
            </AuthorizeView>
        </ListItemsHeader>

        <div class="container">
            <TorrentList Items="@TorrentsPagination.Items" />

            <Pagination Page="@Page"
                        PageSize="@PageSize"
                        TotalPages="@TorrentsPagination.TotalPages"
                        TotalItems="@TorrentsPagination.TotalItems"
                        OnPageChange="@PageChanged" />
        </div>
    }
</Page>

@code
{
    private PaginationResult<TorrentViewModel> TorrentsPagination { get; set; }
    private TorrentFilterViewModel FilterModel { get; set; } = new TorrentFilterViewModel();
    private int Page { get; set; } = 1;
    private int PageSize => PageSettings.TorrentsPerPageCount;

    protected override async Task OnInitializedAsync() => await LoadAsync(TorrentsAsync);

    private async Task TorrentsAsync() => TorrentsPagination = await TorrentService.ListAsync(Page, PageSize, FilterModel);

    private async Task PageChanged(int page)
    {
        Page = page;

        await ActionAsync(TorrentsAsync);
    }

    private async Task FilterChanged(TorrentFilterViewModel filter)
    {
        FilterModel = filter;

        await PageChanged(1);
    }
}