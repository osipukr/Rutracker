@inject ITorrentService TorrentService
@inject ICommentService CommentService

@page "/torrents/{id:int}"

<div class="mat-layout-grid px-0 pb-5">
    <div class="mat-layout-grid-inner">
        <div class="mat-layout-grid-cell">
            <MatIconButton Link="@Constants.Path.Torrents" Icon="@MatIconNames.Arrow_back" />
        </div>
    </div>
</div>

<Page Title="torrent information" Action="@LoadAction" Errors="@Errors">
    <TorrentDetails Torrent="@TorrentDetailsModel" />

    @if (CommentPagination != null)
    {
        <CommentList Items="@Comments"
                     TotalItems="@CommentPagination.TotalItems"
                     OnCreate="@CommentCreateAsync"
                     OnUpdate="@CommentUpdateAsync"
                     OnDelete="@CommentDeleteAsync"
                     OnLike="@CommentLikeAsync" />

        <Pagination Page="@Page"
                    PageSize="@PageSize"
                    TotalPages="@CommentPagination.TotalPages"
                    TotalItems="@CommentPagination.TotalItems"
                    OnPageChange="@PageChanged" />
    }
</Page>

@code
{
    [Parameter] public int Id { get; set; }

    private TorrentDetailsViewModel TorrentDetailsModel { get; set; }
    private PaginationResult<CommentViewModel> CommentPagination { get; set; }
    private List<CommentViewModel> Comments { get; set; } = new List<CommentViewModel>();
    private int Page { get; set; } = 1;
    private int PageSize => ViewSettings.CommentsPerPageCount;

    protected override async Task OnInitializedAsync()
    {
        await LoadAsync(TorrentAsync);

        if (LoadAction == ActionTypes.Succeeded)
        {
            await ActionAsync(CommentsAsync);
        }
    }

    private async Task TorrentAsync() => TorrentDetailsModel = await TorrentService.FindAsync(Id);

    private async Task CommentsAsync()
    {
        CommentPagination = await CommentService.ListAsync(Page, PageSize, Id);
        Comments = CommentPagination.Items.ToList();
    }

    private async Task PageChanged(int page)
    {
        Page = page;

        await ActionAsync(CommentsAsync);
    }

    private async Task CommentCreateAsync(CommentCreateViewModel comment) => await ActionAsync(async () =>
    {
        comment.TorrentId = TorrentDetailsModel.Id;

        var result = await CommentService.AddAsync(comment);

        Comments.Insert(0, await CommentService.FindAsync(result.Id));
    }, successMessage: "Comment created successfully.");

    private async Task CommentUpdateAsync(CommentViewModel comment, CommentUpdateViewModel model) => await ActionAsync(async () =>
    {
        if (comment.Text == model.Text) return;

        var result = await CommentService.UpdateAsync(comment.Id, model);
        var index = Comments.FindIndex(x => x.Id == comment.Id);

        Comments[index] = result;

        MatToaster.Add("Comment updated successfully.", MatToastType.Success);
    });

    private async Task CommentDeleteAsync(int id) => await ActionAsync(async () =>
    {
        await CommentService.DeleteAsync(id);

        var index = Comments.FindIndex(x => x.Id == id);

        Comments.RemoveAt(index);
    }, successMessage: "Comment deleted successfully.");

    private async Task CommentLikeAsync(int id) => await ActionAsync(async () =>
    {
        var result = await CommentService.LikeCommentAsync(id);
        var index = Comments.FindIndex(x => x.Id == id);

        Comments[index] = result;
    });
}