@layout LoginLayout

@inject IAccountService AccountService

@page "/account/register/complete"

@using Microsoft.AspNetCore.WebUtilities

<MatCard>
    @if (LoadAction == ActionTypes.Failed)
    {
        <Alert Type="@AlertTypes.Danger">
            @Errors
        </Alert>
    }

    <EditForm Model="@Model" OnValidSubmit="@CompleteRegistrationAsync">
        <DataAnnotationsValidator />

        <div class="form-group">
            <MatTextField @bind-Value="@Model.FirstName"
                          Label="First Name"
                          Icon="@MatIconNames.Create"
                          IconTrailing="true"
                          FullWidth="true" />

            <ValidationMessage For="@(() => Model.FirstName)" />
        </div>

        <div class="form-group">
            <MatTextField @bind-Value="@Model.LastName"
                          Label="Last Name"
                          Icon="@MatIconNames.Create"
                          IconTrailing="true"
                          FullWidth="true" />

            <ValidationMessage For="@(() => Model.LastName)" />
        </div>

        <div class="form-group">
            <MatTextField @bind-Value="@Model.Password"
                          Label="Password"
                          Icon="@MatIconNames.Lock_open"
                          IconTrailing="true"
                          FullWidth="true"
                          Required="true"
                          type="password" />

            <ValidationMessage For="@(() => Model.Password)" />
        </div>

        <div class="form-group">
            <MatTextField @bind-Value="@Model.ConfirmPassword"
                          Label="Password Confirmation"
                          Icon="@MatIconNames.Lock_open"
                          IconTrailing="true"
                          FullWidth="true"
                          Required="true"
                          type="password" />

            <ValidationMessage For="@(() => Model.ConfirmPassword)" />
        </div>

        <div class="d-flex flex-row-reverse my-3">
            <MatButton Label="Register" Raised="true" type="submit" />
        </div>

        <hr />

        <div class="d-flex justify-content-center align-items-center">
            <MatButton Link="@Constants.Path.Login" Label="Login" Outlined="true" />
        </div>

    </EditForm>
</MatCard>

@code
{
    private CompleteRegistrationViewModel Model { get; set; } = new CompleteRegistrationViewModel();

    protected override void OnInitialized()
    {
        var uri = new Uri(NavigationManager.Uri);

        Model = new CompleteRegistrationViewModel
        {
            UserId = QueryHelpers.ParseQuery(uri.Query).TryGetValue(nameof(CompleteRegistrationViewModel.UserId), out var userId)
                ? userId.FirstOrDefault()
                : null,

            Token = QueryHelpers.ParseQuery(uri.Query).TryGetValue(nameof(CompleteRegistrationViewModel.Token), out var token)
                ? token.FirstOrDefault()
                : null
        };

        if (Model.UserId == null || Model.Token == null)
        {
            NavigationManager.NavigateTo(Constants.Path.Home);
        }
    }

    private async Task CompleteRegistrationAsync()
    {
        await LoadAsync(async () => await AccountService.CompleteRegistration(Model));

        if (LoadAction == ActionTypes.Succeeded)
        {
            NavigationManager.NavigateTo(Constants.Path.Home);
        }
    }
}