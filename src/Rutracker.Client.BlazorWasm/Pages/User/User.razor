@attribute [Authorize(Policy = Policies.IsUser)]

@inject IUserService UserService

@page "/users/{username}"

<Page Action="@LoadAction" Errors="@Errors">
    <div class="profile-container">
        <div class="profile-header">
            <div class="profile-header__image">
                @if (PageHelpers.IsValidImageUrl(UserModel.ImageUrl))
                {
                    <img class="w-100 h-100 rounded-circle" src="@UserModel.ImageUrl" alt="User image" />
                }
                else
                {
                    <img class="w-100 h-100 rounded-circle" src="@Constants.Path.DefaultUserImage" alt="Default user image" />
                }
            </div>

            <h1 class="profile-header__name">@UserModel.UserName</h1>
        </div>

        <div class="profile-body">
            <MatList SingleSelection="true" TwoLine="true">
                <MatListItem>
                    <MatListItemText>
                        <MatListItemPrimaryText>First Name</MatListItemPrimaryText>
                        <MatListItemSecondaryText>@UserModel.FirstName</MatListItemSecondaryText>
                    </MatListItemText>
                </MatListItem>

                <MatListItem>
                    <MatListItemText>
                        <MatListItemPrimaryText>Last Name</MatListItemPrimaryText>
                        <MatListItemSecondaryText>@UserModel.LastName</MatListItemSecondaryText>
                    </MatListItemText>
                </MatListItem>

                <MatListItem>
                    <MatListItemText>
                        <MatListItemPrimaryText>Email</MatListItemPrimaryText>
                        <MatListItemSecondaryText>@UserModel.Email</MatListItemSecondaryText>
                    </MatListItemText>
                </MatListItem>

                <MatListItem>
                    <MatListItemText>
                        <MatListItemPrimaryText>Registered At</MatListItemPrimaryText>
                        <MatListItemSecondaryText>@UserModel.RegisteredAt.ToLongDateString()</MatListItemSecondaryText>
                    </MatListItemText>
                </MatListItem>
            </MatList>
        </div>
    </div>
</Page>

@code
{
    [CascadingParameter] public Task<AuthenticationState> AuthenticationStateTask { get; set; }
    [Parameter] public string UserName { get; set; }

    private UserProfileViewModel UserModel { get; set; }

    protected override async Task OnInitializedAsync() => await LoadAsync(async () =>
    {
        var state = await AuthenticationStateTask;

        if (UserName == state.GetUserName())
        {
            NavigationManager.NavigateTo(Constants.Path.Profile);
        }
        else
        {
            UserModel = await UserService.ProfileAsync(UserName);
        }
    });
}
