@inject IModalService ModalService

<div class="row">
    <div class="col-12">
        <div class="card">
            <div class="card-body">
                <div class="card-title mb-4">
                    <div class="d-flex justify-content-start">
                        <MatButton OnClick="@MenuOpenClicked" RefBack="@_button" class="p-0 h-100 no-select image-container" style="width: 200px;">
                            @if (PageHelpers.IsValidImageUrl(Torrent.ImageUrl))
                            {
                                <img src="@Torrent.ImageUrl" class="img-thumbnail" alt="Torrent image" />
                            }
                            else
                            {
                                <img src="@Constants.Path.DefaultTorrentImage" class="img-thumbnail" alt="Default torrent image" />
                            }
                        </MatButton>

                        <MatMenu @ref="_menu" TargetForwardRef="@_button">
                            <MatList>
                                <MatListItem OnClick="@ChangeImageModalOpened">From url</MatListItem>
                                <MatListItem OnClick="@ChangeImageFileModalOpened">From file</MatListItem>

                                @if (PageHelpers.IsValidImageUrl(Torrent.ImageUrl))
                                {
                                    <MatListItem OnClick="@DeleteModalOpened">Delete</MatListItem>
                                }
                                else
                                {
                                    <MatListItem Disabled="true">Delete</MatListItem>
                                }
                            </MatList>
                        </MatMenu>

                        <div class="ml-3">
                            <h2 class="d-block" title="Torrent name" style="font-size: 1.5rem; font-weight: bold">
                                @Torrent.Name
                            </h2>

                            <h6 class="d-block" title="User name">
                                Created by: <a href="@PageHelpers.UserLink(Torrent.User.UserName)">@Torrent.User.UserName</a>
                            </h6>

                            <h6 class="d-block" title="Torrent description">
                                Description: @Torrent.Description
                            </h6>
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="col-12">
                        <MatList TwoLine="true" class="mb-4">
                            <MatListItem>
                                <MatListItemText>
                                    <MatListItemPrimaryText>Id</MatListItemPrimaryText>
                                    <MatListItemSecondaryText>@Torrent.Id</MatListItemSecondaryText>
                                </MatListItemText>
                            </MatListItem>

                            <MatListItem>
                                <MatListItemText>
                                    <MatListItemPrimaryText>Title</MatListItemPrimaryText>
                                    <MatListItemSecondaryText>@Torrent.Name</MatListItemSecondaryText>
                                </MatListItemText>
                            </MatListItem>

                            <MatListItem>
                                <MatListItemText>
                                    <MatListItemPrimaryText>Created At</MatListItemPrimaryText>
                                    <MatListItemSecondaryText>@Torrent.CreatedAt.ToLongDateString()</MatListItemSecondaryText>
                                </MatListItemText>
                            </MatListItem>

                            <MatListItem>
                                <MatListItemText>
                                    <MatListItemPrimaryText>Content</MatListItemPrimaryText>
                                    <MatListItemSecondaryText>@Torrent.Content</MatListItemSecondaryText>
                                </MatListItemText>
                            </MatListItem>
                        </MatList>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code
{
    [Parameter] public TorrentDetailsViewModel Torrent { get; set; }
    [Parameter] public EventCallback<ChangeTorrentImageViewModel> OnImageChange { get; set; }
    [Parameter] public EventCallback<string> OnImageFileChange { get; set; }
    [Parameter] public EventCallback OnImageDelete { get; set; }

    private ForwardRef _button = new ForwardRef();
    private BaseMatMenu _menu;

    private async Task MenuOpenClicked() => await _menu.OpenAsync();

    private void ChangeImageModalOpened()
    {
        ModalService.OnClose += ChangeImageModalClosed;
        ModalService.Show("Change torrent image", typeof(TorrentImageChangeModal));
    }

    private void ChangeImageFileModalOpened()
    {
        var parameters = new ModalParameters();

        parameters.Add(nameof(TorrentDetailsViewModel.Id), Torrent.Id);

        ModalService.OnClose += ChangeImageFileModalClosed;
        ModalService.Show("Change torrent image", typeof(TorrentImageFileChangeModal), parameters);
    }

    private void DeleteModalOpened()
    {
        ModalService.OnClose += DeleteModalClosed;
        ModalService.Show("Delete torrent image", typeof(TorrentImageDeleteModal));
    }

    private async void ChangeImageModalClosed(ModalResult result)
    {
        if (!result.Cancelled && result.Data is ChangeTorrentImageViewModel model)
        {
            await OnImageChange.InvokeAsync(model);
        }

        ModalService.OnClose -= ChangeImageModalClosed;
    }

    private async void ChangeImageFileModalClosed(ModalResult result)
    {
        if (!result.Cancelled && result.Data is string model)
        {
            await OnImageFileChange.InvokeAsync(model);
        }

        ModalService.OnClose -= ChangeImageFileModalClosed;
    }

    private async void DeleteModalClosed(ModalResult result)
    {
        if (!result.Cancelled)
        {
            await OnImageDelete.InvokeAsync(EventArgs.Empty);
        }

        ModalService.OnClose -= DeleteModalClosed;
    }
}