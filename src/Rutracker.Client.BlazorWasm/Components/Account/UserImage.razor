@inject IModalService ModalService

<div class="profile-header__image position-relative">
    <MatButton OnClick="@MenuOpenClicked" RefBack="@_button" class="p-0 w-100 h-100 no-select rounded-circle mat-elevation-z5" title="Change image">
        @if (PageHelpers.IsValidImageUrl(Url))
        {
            <img class="w-100 h-100" src="@Url" alt="User image" />
        }
        else
        {
            <img class="w-100 h-100" src="@Constants.Path.DefaultUserImage" alt="Default user image" />
        }
    </MatButton>

    <MatMenu @ref="_menu" TargetForwardRef="@_button">
        <MatList>
            <MatListItem OnClick="@ChangeUrlModalOpened">From url</MatListItem>
            <MatListItem OnClick="@ChangeFileModalOpened">From file</MatListItem>

            @if (PageHelpers.IsValidImageUrl(Url))
            {
                <MatListItem OnClick="@DeleteModalOpened">Delete</MatListItem>
            }
            else
            {
                <MatListItem Disabled="true">Delete</MatListItem>
            }
        </MatList>
    </MatMenu>
</div>

@code
{
    [Parameter] public string Url { get; set; }
    [Parameter] public EventCallback<ChangeImageViewModel> OnChange { get; set; }
    [Parameter] public EventCallback<string> OnChangeFile { get; set; }
    [Parameter] public EventCallback OnDelete { get; set; }

    private ForwardRef _button = new ForwardRef();
    private BaseMatMenu _menu;

    private async Task MenuOpenClicked() => await _menu.OpenAsync();

    private void ChangeUrlModalOpened()
    {
        ModalService.OnClose += ChangeUrlModalClosed;
        ModalService.Show("Change user image", typeof(UserImageChangeModal));
    }

    private void ChangeFileModalOpened()
    {
        ModalService.OnClose += ChangeFileModalClosed;
        ModalService.Show("Change user image", typeof(UserImageFileChangeModal));
    }

    private void DeleteModalOpened()
    {
        ModalService.OnClose += DeleteModalClosed;
        ModalService.Show("Delete user image", typeof(UserImageDeleteModal));
    }

    private async void ChangeUrlModalClosed(ModalResult result)
    {
        if (!result.Cancelled && result.Data is ChangeImageViewModel model)
        {
            await OnChange.InvokeAsync(model);
        }

        ModalService.OnClose -= ChangeUrlModalClosed;
    }

    private async void ChangeFileModalClosed(ModalResult result)
    {
        if (!result.Cancelled && result.Data is string model)
        {
            await OnChangeFile.InvokeAsync(model);
        }

        ModalService.OnClose -= ChangeFileModalClosed;
    }

    private async void DeleteModalClosed(ModalResult result)
    {
        if (!result.Cancelled)
        {
            await OnDelete.InvokeAsync(EventArgs.Empty);
        }

        ModalService.OnClose -= DeleteModalClosed;
    }
}