@inject IModalService ModalService

<MatTab>
    <LabelContent>Info</LabelContent>
    <ChildContent>
        <div class="form-group">
            <MatTextField Value="@UserModel.UserName"
                          Label="User Name"
                          Icon="@MatIconNames.Person"
                          IconTrailing="true"
                          FullWidth="true"
                          ReadOnly="true" />
        </div>

        <div class="form-group">
            <MatTextField Value="@UserModel.Email"
                          Label="User Name"
                          Icon="@MatIconNames.Mail_outline"
                          IconTrailing="true"
                          FullWidth="true"
                          ReadOnly="true" />
        </div>

        <div class="form-group">
            <MatTextField Value="@UserModel.PhoneNumber"
                          Label="Phone number"
                          Icon="@MatIconNames.Phone"
                          IconTrailing="true"
                          FullWidth="true"
                          ReadOnly="true" />
        </div>

        <div class="form-group">
            <MatTextField Value="@UserModel.FirstName" Label="First Name" FullWidth="true" ReadOnly="true" />
        </div>

        <div class="form-group">
            <MatTextField Value="@UserModel.LastName" Label="Last Name" FullWidth="true" ReadOnly="true" />
        </div>

        <div class="form-group">
            <MatTextField Value="@UserModel.RegisteredAt.ToLongDateString()" Label="Registered At" FullWidth="true" ReadOnly="true" />
        </div>

        <div class="d-flex flex-row-reverse mt-4">
            <MatButton OnClick="@ChangeModalOpened" Label="Edit profile" Raised="true" />
        </div>
    </ChildContent>
</MatTab>

@code
{
    [Parameter] public UserDetailsViewModel UserModel { get; set; }
    [Parameter] public EventCallback<ChangeUserViewModel> OnChange { get; set; }

    private void ChangeModalOpened()
    {
        var parameters = new ModalParameters();

        parameters.Add(nameof(ChangeUserViewModel), new ChangeUserViewModel
        {
            FirstName = UserModel.FirstName,
            LastName = UserModel.LastName
        });

        ModalService.OnClose += ChangeModalClosed;
        ModalService.Show<UserInfoChangeModal>("Change user information", parameters);
    }

    private async void ChangeModalClosed(ModalResult result)
    {
        if (!result.Cancelled && result.Data is ChangeUserViewModel model)
        {
            await OnChange.InvokeAsync(model);
        }

        ModalService.OnClose -= ChangeModalClosed;
    }
}