@inject IModalService ModalService

<EditForm Model="@ChangeUserModel" OnValidSubmit="@ChangeClicked">
    <DataAnnotationsValidator />

    <div class="form-group">
        <MatTextField @bind-Value="@ChangeUserModel.FirstName" Label="Fist Name" FullWidth="true" />
        <ValidationMessage For="@(() => ChangeUserModel.FirstName)" />
    </div>

    <div class="form-group">
        <MatTextField @bind-Value="@ChangeUserModel.LastName" Label="Last Name" FullWidth="true" />
        <ValidationMessage For="@(() => ChangeUserModel.LastName)" />
    </div>

    <div class="d-flex flex-row-reverse mt-4">
        <MatButton Label="Update" type="submit" />
        <MatButton OnClick="@CancelClicked" Label="Cancel" />
    </div>
</EditForm>

@code
{
    [CascadingParameter] public ModalParameters Parameters { get; set; }

    private ChangeUserViewModel ChangeUserModel { get; set; }

    protected override void OnInitialized() => ChangeUserModel = Parameters.Get<ChangeUserViewModel>(nameof(ChangeUserViewModel));

    private void ChangeClicked() => ModalService.Close(ModalResult.Ok(ChangeUserModel));
    private void CancelClicked() => ModalService.Cancel();
}